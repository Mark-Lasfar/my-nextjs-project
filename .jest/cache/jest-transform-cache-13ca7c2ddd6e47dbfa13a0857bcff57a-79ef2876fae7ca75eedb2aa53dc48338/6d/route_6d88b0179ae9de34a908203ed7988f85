681e5d54d2f18f716b7e4941fae91fc1
"use strict";

/* istanbul ignore next */
function cov_6sdb32bsj() {
  var path = "/home/mark/Downloads/nextjs-amazona-main/app/sitemap-index.xml/route.ts";
  var hash = "8c823cb0d346344dc2582340f3f0849961947cff";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mark/Downloads/nextjs-amazona-main/app/sitemap-index.xml/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 24
        },
        end: {
          line: 11,
          column: 68
        }
      },
      "4": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 121,
          column: 5
        }
      },
      "5": {
        start: {
          line: 14,
          column: 34
        },
        end: {
          line: 14,
          column: 73
        }
      },
      "6": {
        start: {
          line: 15,
          column: 24
        },
        end: {
          line: 15,
          column: 61
        }
      },
      "7": {
        start: {
          line: 16,
          column: 21
        },
        end: {
          line: 16,
          column: 31
        }
      },
      "8": {
        start: {
          line: 17,
          column: 29
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "9": {
        start: {
          line: 100,
          column: 24
        },
        end: {
          line: 108,
          column: 14
        }
      },
      "10": {
        start: {
          line: 102,
          column: 33
        },
        end: {
          line: 107,
          column: 7
        }
      },
      "11": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 115,
          column: 11
        }
      },
      "12": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 58
        }
      },
      "13": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 120,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 12,
            column: 18
          }
        },
        loc: {
          start: {
            line: 12,
            column: 21
          },
          end: {
            line: 122,
            column: 1
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 102,
            column: 25
          },
          end: {
            line: 102,
            column: 26
          }
        },
        loc: {
          start: {
            line: 102,
            column: 33
          },
          end: {
            line: 107,
            column: 7
          }
        },
        line: 102
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 24
          },
          end: {
            line: 15,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 24
          },
          end: {
            line: 15,
            column: 27
          }
        }, {
          start: {
            line: 15,
            column: 31
          },
          end: {
            line: 15,
            column: 61
          }
        }],
        line: 15
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/mark/Downloads/nextjs-amazona-main/app/sitemap-index.xml/route.ts"],
      sourcesContent: ["import { getSetting } from '@/lib/actions/setting.actions'\n\n/**\n * Generate sitemap for the website\n * @returns {Promise<Response>} XML response containing sitemap\n */\nexport async function GET(): Promise<Response> {\n  try {\n    const {\n      site: { url },\n    } = await getSetting()\n    const baseUrl = url || 'https://hager-zon.vercel.app'\n    const date = new Date()\n\n    const sitemapItems = [\n      {\n        url: baseUrl,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/sitemap.xml`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/sitemap-products.xml`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/sitemap-blog.xml`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/sitemap-images.xml`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/search`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/products`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/categories`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/cart`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/checkout`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/account`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/orders`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/wishlist`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/about-us`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/contact-us`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/privacy-policy`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/terms-of-service`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/shipping-policy`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/return-policy`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/faq`,\n        lastModified: date,\n      },\n    ]\n\n    // Convert to XML format\n    const sitemap = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n      ${sitemapItems\n        .map(\n          (item) => `\n        <url>\n          <loc>${item.url}</loc>\n          <lastmod>${item.lastModified.toISOString()}</lastmod>\n        </url>\n      `\n        )\n        .join('')}\n    </urlset>`\n\n    // Return as XML response\n    return new Response(sitemap, {\n      headers: {\n        'Content-Type': 'application/xml',\n        'Cache-Control': 'public, max-age=3600, s-maxage=3600, stale-while-revalidate=86400',\n      },\n    })\n  } catch (error) {\n    console.error('Error generating sitemap:', error)\n    return new Response('Error generating sitemap', { status: 500 })\n  }\n}\n\n// Current Date and Time (UTC): 2025-04-21 02:44:43\n// Current User's Login: ibrahim-lasfar"],
      names: ["GET", "site", "url", "getSetting", "baseUrl", "date", "Date", "sitemapItems", "lastModified", "sitemap", "map", "item", "toISOString", "join", "Response", "headers", "error", "console", "status"],
      mappings: ";;;;+BAMsBA;;;eAAAA;;;gCANK;AAMpB,eAAeA;IACpB,IAAI;QACF,MAAM,EACJC,MAAM,EAAEC,GAAG,EAAE,EACd,GAAG,MAAMC,IAAAA,0BAAU;QACpB,MAAMC,UAAUF,OAAO;QACvB,MAAMG,OAAO,IAAIC;QAEjB,MAAMC,eAAe;YACnB;gBACEL,KAAKE;gBACLI,cAAcH;YAChB;YACA;gBACEH,KAAK,GAAGE,QAAQ,YAAY,CAAC;gBAC7BI,cAAcH;YAChB;YACA;gBACEH,KAAK,GAAGE,QAAQ,qBAAqB,CAAC;gBACtCI,cAAcH;YAChB;YACA;gBACEH,KAAK,GAAGE,QAAQ,iBAAiB,CAAC;gBAClCI,cAAcH;YAChB;YACA;gBACEH,KAAK,GAAGE,QAAQ,mBAAmB,CAAC;gBACpCI,cAAcH;YAChB;YACA;gBACEH,KAAK,GAAGE,QAAQ,OAAO,CAAC;gBACxBI,cAAcH;YAChB;YACA;gBACEH,KAAK,GAAGE,QAAQ,SAAS,CAAC;gBAC1BI,cAAcH;YAChB;YACA;gBACEH,KAAK,GAAGE,QAAQ,WAAW,CAAC;gBAC5BI,cAAcH;YAChB;YACA;gBACEH,KAAK,GAAGE,QAAQ,KAAK,CAAC;gBACtBI,cAAcH;YAChB;YACA;gBACEH,KAAK,GAAGE,QAAQ,SAAS,CAAC;gBAC1BI,cAAcH;YAChB;YACA;gBACEH,KAAK,GAAGE,QAAQ,QAAQ,CAAC;gBACzBI,cAAcH;YAChB;YACA;gBACEH,KAAK,GAAGE,QAAQ,OAAO,CAAC;gBACxBI,cAAcH;YAChB;YACA;gBACEH,KAAK,GAAGE,QAAQ,SAAS,CAAC;gBAC1BI,cAAcH;YAChB;YACA;gBACEH,KAAK,GAAGE,QAAQ,SAAS,CAAC;gBAC1BI,cAAcH;YAChB;YACA;gBACEH,KAAK,GAAGE,QAAQ,WAAW,CAAC;gBAC5BI,cAAcH;YAChB;YACA;gBACEH,KAAK,GAAGE,QAAQ,eAAe,CAAC;gBAChCI,cAAcH;YAChB;YACA;gBACEH,KAAK,GAAGE,QAAQ,iBAAiB,CAAC;gBAClCI,cAAcH;YAChB;YACA;gBACEH,KAAK,GAAGE,QAAQ,gBAAgB,CAAC;gBACjCI,cAAcH;YAChB;YACA;gBACEH,KAAK,GAAGE,QAAQ,cAAc,CAAC;gBAC/BI,cAAcH;YAChB;YACA;gBACEH,KAAK,GAAGE,QAAQ,IAAI,CAAC;gBACrBI,cAAcH;YAChB;SACD;QAED,wBAAwB;QACxB,MAAMI,UAAU,CAAC;;MAEf,EAAEF,aACCG,GAAG,CACF,CAACC,OAAS,CAAC;;eAEN,EAAEA,KAAKT,GAAG,CAAC;mBACP,EAAES,KAAKH,YAAY,CAACI,WAAW,GAAG;;MAE/C,CAAC,EAEEC,IAAI,CAAC,IAAI;aACL,CAAC;QAEV,yBAAyB;QACzB,OAAO,IAAIC,SAASL,SAAS;YAC3BM,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB;YACnB;QACF;IACF,EAAE,OAAOC,OAAO;QACdC,QAAQD,KAAK,CAAC,6BAA6BA;QAC3C,OAAO,IAAIF,SAAS,4BAA4B;YAAEI,QAAQ;QAAI;IAChE;AACF,EAEA,mDAAmD;CACnD,uCAAuC"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8c823cb0d346344dc2582340f3f0849961947cff"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_6sdb32bsj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_6sdb32bsj();
cov_6sdb32bsj().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_6sdb32bsj().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_6sdb32bsj().f[0]++;
    cov_6sdb32bsj().s[2]++;
    return GET;
  }
});
const _settingactions =
/* istanbul ignore next */
(cov_6sdb32bsj().s[3]++, require("../../lib/actions/setting.actions"));
async function GET() {
  /* istanbul ignore next */
  cov_6sdb32bsj().f[1]++;
  cov_6sdb32bsj().s[4]++;
  try {
    const {
      site: {
        url
      }
    } =
    /* istanbul ignore next */
    (cov_6sdb32bsj().s[5]++, await (0, _settingactions.getSetting)());
    const baseUrl =
    /* istanbul ignore next */
    (cov_6sdb32bsj().s[6]++,
    /* istanbul ignore next */
    (cov_6sdb32bsj().b[0][0]++, url) ||
    /* istanbul ignore next */
    (cov_6sdb32bsj().b[0][1]++, 'https://hager-zon.vercel.app'));
    const date =
    /* istanbul ignore next */
    (cov_6sdb32bsj().s[7]++, new Date());
    const sitemapItems =
    /* istanbul ignore next */
    (cov_6sdb32bsj().s[8]++, [{
      url: baseUrl,
      lastModified: date
    }, {
      url: `${baseUrl}/sitemap.xml`,
      lastModified: date
    }, {
      url: `${baseUrl}/sitemap-products.xml`,
      lastModified: date
    }, {
      url: `${baseUrl}/sitemap-blog.xml`,
      lastModified: date
    }, {
      url: `${baseUrl}/sitemap-images.xml`,
      lastModified: date
    }, {
      url: `${baseUrl}/search`,
      lastModified: date
    }, {
      url: `${baseUrl}/products`,
      lastModified: date
    }, {
      url: `${baseUrl}/categories`,
      lastModified: date
    }, {
      url: `${baseUrl}/cart`,
      lastModified: date
    }, {
      url: `${baseUrl}/checkout`,
      lastModified: date
    }, {
      url: `${baseUrl}/account`,
      lastModified: date
    }, {
      url: `${baseUrl}/orders`,
      lastModified: date
    }, {
      url: `${baseUrl}/wishlist`,
      lastModified: date
    }, {
      url: `${baseUrl}/about-us`,
      lastModified: date
    }, {
      url: `${baseUrl}/contact-us`,
      lastModified: date
    }, {
      url: `${baseUrl}/privacy-policy`,
      lastModified: date
    }, {
      url: `${baseUrl}/terms-of-service`,
      lastModified: date
    }, {
      url: `${baseUrl}/shipping-policy`,
      lastModified: date
    }, {
      url: `${baseUrl}/return-policy`,
      lastModified: date
    }, {
      url: `${baseUrl}/faq`,
      lastModified: date
    }]);
    // Convert to XML format
    const sitemap =
    /* istanbul ignore next */
    (cov_6sdb32bsj().s[9]++, `<?xml version="1.0" encoding="UTF-8"?>
    <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
      ${sitemapItems.map(item => {
      /* istanbul ignore next */
      cov_6sdb32bsj().f[2]++;
      cov_6sdb32bsj().s[10]++;
      return `
        <url>
          <loc>${item.url}</loc>
          <lastmod>${item.lastModified.toISOString()}</lastmod>
        </url>
      `;
    }).join('')}
    </urlset>`);
    // Return as XML response
    /* istanbul ignore next */
    cov_6sdb32bsj().s[11]++;
    return new Response(sitemap, {
      headers: {
        'Content-Type': 'application/xml',
        'Cache-Control': 'public, max-age=3600, s-maxage=3600, stale-while-revalidate=86400'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_6sdb32bsj().s[12]++;
    console.error('Error generating sitemap:', error);
    /* istanbul ignore next */
    cov_6sdb32bsj().s[13]++;
    return new Response('Error generating sitemap', {
      status: 500
    });
  }
} // Current Date and Time (UTC): 2025-04-21 02:44:43
// Current User's Login: ibrahim-lasfar
//# sourceMappingURL=data:application/json;charset=utf-8;base64,