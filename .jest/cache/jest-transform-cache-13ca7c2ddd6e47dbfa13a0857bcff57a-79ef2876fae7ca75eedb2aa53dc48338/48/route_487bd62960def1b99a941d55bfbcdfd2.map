{"version":3,"names":["GET","request","cov_2i092acefu","f","listType","s","b","nextUrl","searchParams","get","productIdsParam","categoriesParam","_server","NextResponse","json","productIds","split","categories","filter","_id","$in","category","$nin","_db","connectToDatabase","products","_productmodel","default","find","sort","a","indexOf","toString"],"sources":["/home/mark/Downloads/nextjs-amazona-main/app/api/products/browsing-history/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\nimport Product from '@/lib/db/models/product.model'\nimport { connectToDatabase } from '@/lib/db'\n\nexport const GET = async (request: NextRequest) => {\n  const listType = request.nextUrl.searchParams.get('type') || 'history'\n  const productIdsParam = request.nextUrl.searchParams.get('ids')\n  const categoriesParam = request.nextUrl.searchParams.get('categories')\n\n  if (!productIdsParam || !categoriesParam) {\n    return NextResponse.json([])\n  }\n\n  const productIds = productIdsParam.split(',')\n  const categories = categoriesParam.split(',')\n  const filter =\n    listType === 'history'\n      ? {\n          _id: { $in: productIds },\n        }\n      : { category: { $in: categories }, _id: { $nin: productIds } }\n\n  await connectToDatabase()\n  const products = await Product.find(filter)\n  if (listType === 'history')\n    return NextResponse.json(\n      products.sort(\n        (a, b) =>\n          productIds.indexOf(a._id.toString()) -\n          productIds.indexOf(b._id.toString())\n      )\n    )\n  return NextResponse.json(products)\n}\n"],"mappingsa;;;;;;WAAAA,GAAA;;;;;kCAL6B;;;wEAEtB;;;kCACc;;;;;;;;;;;;;;;;;AAE3B,MAAMA,GAAA,GAAM,MAAOC,OAAA;EAAA;EAAAC,cAAA,GAAAC,CAAA;EACxB,MAAMC,QAAA;EAAA;EAAA,CAAAF,cAAA,GAAAG,CAAA;EAAW;EAAA,CAAAH,cAAA,GAAAI,CAAA,UAAAL,OAAA,CAAQM,OAAO,CAACC,YAAY,CAACC,GAAG,CAAC;EAAA;EAAA,CAAAP,cAAA,GAAAI,CAAA,UAAW;EAC7D,MAAMI,eAAA;EAAA;EAAA,CAAAR,cAAA,GAAAG,CAAA,OAAkBJ,OAAA,CAAQM,OAAO,CAACC,YAAY,CAACC,GAAG,CAAC;EACzD,MAAME,eAAA;EAAA;EAAA,CAAAT,cAAA,GAAAG,CAAA,QAAkBJ,OAAA,CAAQM,OAAO,CAACC,YAAY,CAACC,GAAG,CAAC;EAAA;EAAAP,cAAA,GAAAG,CAAA;EAEzD;EAAI;EAAA,CAAAH,cAAA,GAAAI,CAAA,WAACI,eAAA;EAAA;EAAA,CAAAR,cAAA,GAAAI,CAAA,UAAmB,CAACK,eAAA,GAAiB;IAAA;IAAAT,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAG,CAAA;IACxC,OAAOO,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC,EAAE;EAC7B;EAAA;EAAA;IAAAZ,cAAA,GAAAI,CAAA;EAAA;EAEA,MAAMS,UAAA;EAAA;EAAA,CAAAb,cAAA,GAAAG,CAAA,QAAaK,eAAA,CAAgBM,KAAK,CAAC;EACzC,MAAMC,UAAA;EAAA;EAAA,CAAAf,cAAA,GAAAG,CAAA,QAAaM,eAAA,CAAgBK,KAAK,CAAC;EACzC,MAAME,MAAA;EAAA;EAAA,CAAAhB,cAAA,GAAAG,CAAA,QACJD,QAAA,KAAa;EAAA;EAAA,CAAAF,cAAA,GAAAI,CAAA,UACT;IACEa,GAAA,EAAK;MAAEC,GAAA,EAAKL;IAAW;EACzB;EAAA;EAAA,CAAAb,cAAA,GAAAI,CAAA,UACA;IAAEe,QAAA,EAAU;MAAED,GAAA,EAAKH;IAAW;IAAGE,GAAA,EAAK;MAAEG,IAAA,EAAMP;IAAW;EAAE;EAAA;EAAAb,cAAA,GAAAG,CAAA;EAEjE,MAAM,IAAAkB,GAAA,CAAAC,iBAAiB;EACvB,MAAMC,QAAA;EAAA;EAAA,CAAAvB,cAAA,GAAAG,CAAA,QAAW,MAAMqB,aAAA,CAAAC,OAAO,CAACC,IAAI,CAACV,MAAA;EAAA;EAAAhB,cAAA,GAAAG,CAAA;EACpC,IAAID,QAAA,KAAa,WACf;IAAA;IAAAF,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAG,CAAA;IAAA,OAAOO,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtBW,QAAA,CAASI,IAAI,CACX,CAACC,CAAA,EAAGxB,CAAA,KACF;MAAA;MAAAJ,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAG,CAAA;MAAA,OAAAU,UAAA,CAAWgB,OAAO,CAACD,CAAA,CAAEX,GAAG,CAACa,QAAQ,MACjCjB,UAAA,CAAWgB,OAAO,CAACzB,CAAA,CAAEa,GAAG,CAACa,QAAQ;IAAA;EAAA;EAAA;EAAA;IAAA9B,cAAA,GAAAI,CAAA;EAAA;EAAAJ,cAAA,GAAAG,CAAA;EAGzC,OAAOO,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACW,QAAA;AAC3B","ignoreList":[]}