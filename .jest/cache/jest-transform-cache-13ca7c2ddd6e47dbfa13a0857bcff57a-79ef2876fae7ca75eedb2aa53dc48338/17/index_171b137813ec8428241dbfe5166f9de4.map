{"version":3,"names":["trackEvent","cov_1kzlzj5ntb","f","s","trackPageView","url","response","fetch","method","headers","body","JSON","stringify","data","json","success","b","Error","error","console","event"],"sources":["/home/mark/Downloads/nextjs-amazona-main/lib/analytics/index.ts"],"sourcesContent":["interface AnalyticsEvent {\n  name: string\n  properties?: Record<string, unknown>\n}\n\ninterface AnalyticsResponse {\n  success?: boolean\n  error?: string\n}\n\nexport const trackPageView = async (url: string): Promise<void> => {\n  try {\n    const response = await fetch('/api/analytics/pageview', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ url }),\n    })\n\n    const data: AnalyticsResponse = await response.json()\n\n    if (!data.success) {\n      throw new Error(data.error || 'Analytics request failed')\n    }\n  } catch (error) {\n    console.error('Failed to track pageview:', error)\n  }\n}\n\nexport const trackEvent = async (event: AnalyticsEvent): Promise<void> => {\n  try {\n    const response = await fetch('/api/analytics/event', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(event),\n    })\n\n    const data: AnalyticsResponse = await response.json()\n\n    if (!data.success) {\n      throw new Error(data.error || 'Analytics request failed')\n    }\n  } catch (error) {\n    console.error('Failed to track event:', error)\n  }\n}\n"],"mappingsaA,UAAU,WAAAA,CAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAVH,UAAA;;EApBAI,aAAa,WAAAA,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAbC,aAAA;;;;;AAAN,MAAMA,aAAA,GAAgB,MAAOC,GAAA;EAAA;EAAAJ,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAClC,IAAI;IACF,MAAMG,QAAA;IAAA;IAAA,CAAAL,cAAA,GAAAE,CAAA,OAAW,MAAMI,KAAA,CAAM,2BAA2B;MACtDC,MAAA,EAAQ;MACRC,OAAA,EAAS;QACP,gBAAgB;MAClB;MACAC,IAAA,EAAMC,IAAA,CAAKC,SAAS,CAAC;QAAEP;MAAI;IAC7B;IAEA,MAAMQ,IAAA;IAAA;IAAA,CAAAZ,cAAA,GAAAE,CAAA,OAA0B,MAAMG,QAAA,CAASQ,IAAI;IAAA;IAAAb,cAAA,GAAAE,CAAA;IAEnD,IAAI,CAACU,IAAA,CAAKE,OAAO,EAAE;MAAA;MAAAd,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACjB,MAAM,IAAIc,KAAA;MAAM;MAAA,CAAAhB,cAAA,GAAAe,CAAA,UAAAH,IAAA,CAAKK,KAAK;MAAA;MAAA,CAAAjB,cAAA,GAAAe,CAAA,UAAI;IAChC;IAAA;IAAA;MAAAf,cAAA,GAAAe,CAAA;IAAA;EACF,EAAE,OAAOE,KAAA,EAAO;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IACdgB,OAAA,CAAQD,KAAK,CAAC,6BAA6BA,KAAA;EAC7C;AACF;AAAA;AAAAjB,cAAA,GAAAE,CAAA;AAEO,MAAMH,UAAA,GAAa,MAAOoB,KAAA;EAAA;EAAAnB,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAC/B,IAAI;IACF,MAAMG,QAAA;IAAA;IAAA,CAAAL,cAAA,GAAAE,CAAA,QAAW,MAAMI,KAAA,CAAM,wBAAwB;MACnDC,MAAA,EAAQ;MACRC,OAAA,EAAS;QACP,gBAAgB;MAClB;MACAC,IAAA,EAAMC,IAAA,CAAKC,SAAS,CAACQ,KAAA;IACvB;IAEA,MAAMP,IAAA;IAAA;IAAA,CAAAZ,cAAA,GAAAE,CAAA,QAA0B,MAAMG,QAAA,CAASQ,IAAI;IAAA;IAAAb,cAAA,GAAAE,CAAA;IAEnD,IAAI,CAACU,IAAA,CAAKE,OAAO,EAAE;MAAA;MAAAd,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACjB,MAAM,IAAIc,KAAA;MAAM;MAAA,CAAAhB,cAAA,GAAAe,CAAA,UAAAH,IAAA,CAAKK,KAAK;MAAA;MAAA,CAAAjB,cAAA,GAAAe,CAAA,UAAI;IAChC;IAAA;IAAA;MAAAf,cAAA,GAAAe,CAAA;IAAA;EACF,EAAE,OAAOE,KAAA,EAAO;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IACdgB,OAAA,CAAQD,KAAK,CAAC,0BAA0BA,KAAA;EAC1C;AACF","ignoreList":[]}