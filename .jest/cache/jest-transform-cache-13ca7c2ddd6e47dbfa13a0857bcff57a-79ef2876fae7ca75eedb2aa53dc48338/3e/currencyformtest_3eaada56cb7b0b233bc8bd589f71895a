d7fab1016efbd50bf24f5c79aef5b7cd
"use strict";
jest.mock('react-hook-form', ()=>({
        ...jest.requireActual('react-hook-form'),
        useForm: ()=>mockForm,
        useFormContext: ()=>({
                ...mockForm,
                getFieldState: jest.fn(()=>({
                        error: null
                    }))
            }),
        useFieldArray: ()=>mockFieldArray
    }));
jest.mock('react', ()=>({
        ...jest.requireActual('react'),
        useState: jest.fn().mockImplementation((initial)=>[
                initial,
                jest.fn()
            ]),
        useMemo: jest.fn().mockImplementation((fn)=>fn())
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _currencyform = /*#__PURE__*/ _interop_require_default(require("../../../app/[locale]/admin/settings/currency-form"));
const _react1 = /*#__PURE__*/ _interop_require_wildcard(require("react"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const mockDefaultValues = {
    availableCurrencies: [
        {
            name: 'US Dollar',
            code: 'USD',
            symbol: '$',
            convertRate: 1
        }
    ],
    defaultCurrency: 'USD',
    site: {
        name: 'Test Store'
    }
};
// Mock form context
const mockForm = {
    control: {
        array: true
    },
    register: jest.fn(),
    setValue: jest.fn(),
    getValues: jest.fn().mockReturnValue(mockDefaultValues),
    watch: jest.fn().mockReturnValue(mockDefaultValues.availableCurrencies),
    formState: {
        errors: {}
    },
    handleSubmit: jest.fn()
};
const mockFieldArray = {
    fields: mockDefaultValues.availableCurrencies,
    append: jest.fn(),
    remove: jest.fn()
};
// Test component wrapper
function TestComponent() {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_currencyform.default, {
        form: mockForm,
        id: "currency-form"
    });
}
describe('CurrencyForm', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        mockFieldArray.append.mockClear();
        mockFieldArray.remove.mockClear();
    });
    it('renders currency form fields', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        expect(_react.screen.getByText('Currency Settings')).toBeInTheDocument();
        expect(_react.screen.getByLabelText(/Currency Name/i)).toBeInTheDocument();
        expect(_react.screen.getByLabelText(/Currency Code/i)).toBeInTheDocument();
        expect(_react.screen.getByLabelText(/Currency Symbol/i)).toBeInTheDocument();
        expect(_react.screen.getByLabelText(/Conversion Rate/i)).toBeInTheDocument();
    });
    it('allows adding new currency', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const addButton = _react.screen.getByText('Add New Currency');
        _react.fireEvent.click(addButton);
        expect(mockFieldArray.append).toHaveBeenCalled();
    });
    it('prevents removing last currency', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const removeButton = _react.screen.getByTitle('Cannot remove last currency');
        expect(removeButton).toBeDisabled();
    });
    it('allows selecting default currency', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const select = _react.screen.getByRole('combobox', {
            name: /Default Currency/i
        });
        expect(select).toBeInTheDocument();
    });
    it('displays currency settings header', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        expect(_react.screen.getByText('Currency Settings')).toBeInTheDocument();
    });
    it('has correct currency code input constraints', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const codeInput = _react.screen.getByLabelText(/Currency Code/i);
        expect(codeInput).toHaveAttribute('maxLength', '3');
    });
    it('has correct conversion rate input constraints', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const rateInput = _react.screen.getByLabelText(/Conversion Rate/i);
        expect(rateInput).toHaveAttribute('type', 'number');
        expect(rateInput).toHaveAttribute('min', '0');
        expect(rateInput).toHaveAttribute('step', '0.0001');
    });
}) // Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-04-21 00:48:07
 // Current User's Login: ibrahim-lasfar
;

//# sourceMappingURL=data:application/json;base64,