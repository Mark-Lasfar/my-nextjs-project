{"version":3,"sources":["/home/mark/Downloads/nextjs-amazona-main/__tests__/components/settings/currency-form.test.tsx"],"sourcesContent":["import { render, screen, fireEvent } from '@testing-library/react'\nimport CurrencyForm from '@/app/[locale]/admin/settings/currency-form'\nimport { FormProvider, useForm } from 'react-hook-form'\nimport { ISettingInput } from '@/types'\n\nconst mockDefaultCurrency = {\n  name: 'US Dollar',\n  code: 'USD',\n  symbol: '$',\n  convertRate: 1,\n}\n\nconst mockDefaultValues = {\n  availableCurrencies: [mockDefaultCurrency],\n  defaultCurrency: 'USD',\n}\n\n// Only override useFieldArray; use the actual implementations for useForm and FormProvider.\nconst mockFieldArray = {\n  fields: [mockDefaultCurrency],\n  append: jest.fn(),\n  remove: jest.fn(),\n}\n\njest.mock('react-hook-form', () => {\n  const actual = jest.requireActual('react-hook-form')\n  return {\n    ...actual,\n    useFieldArray: () => mockFieldArray,\n  }\n})\n\nfunction TestComponent() {\n  const form = useForm<ISettingInput>({\n    defaultValues: mockDefaultValues,\n  })\n\n  return (\n    <FormProvider {...form}>\n      <CurrencyForm form={form} id=\"currency-form\" />\n    </FormProvider>\n  )\n}\n\ndescribe('CurrencyForm', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    mockFieldArray.append.mockClear()\n    mockFieldArray.remove.mockClear()\n  })\n\n  it('renders currency form fields', () => {\n    render(<TestComponent />)\n    expect(screen.getByText('Currency Settings')).toBeInTheDocument()\n    expect(screen.getByText(/Currency Name/i)).toBeInTheDocument()\n    expect(screen.getByText(/Currency Code/i)).toBeInTheDocument()\n    expect(screen.getByText(/Currency Symbol/i)).toBeInTheDocument()\n    expect(screen.getByText(/Conversion Rate/i)).toBeInTheDocument()\n  })\n\n  it('allows adding new currency', () => {\n    render(<TestComponent />)\n    const addButton = screen.getByText('Add New Currency')\n    fireEvent.click(addButton)\n    expect(mockFieldArray.append).toHaveBeenCalled()\n  })\n\n  it('prevents removing last currency', () => {\n    render(<TestComponent />)\n    const removeButton = screen.getByTitle('Cannot remove last currency')\n    expect(removeButton).toBeDisabled()\n  })\n\n  it('allows selecting default currency', () => {\n    render(<TestComponent />)\n    const select = screen.getByRole('combobox', { name: /Default Currency/i })\n    expect(select).toBeInTheDocument()\n  })\n\n  it('displays currency settings header', () => {\n    render(<TestComponent />)\n    expect(screen.getByText('Currency Settings')).toBeInTheDocument()\n  })\n\n  it('has correct currency code input constraints', () => {\n    render(<TestComponent />)\n    const codeInput = screen.getByRole('textbox', { name: /Currency Code/i })\n    expect(codeInput).toHaveAttribute('maxLength', '3')\n  })\n\n  it('has correct conversion rate input constraints', () => {\n    render(<TestComponent />)\n    const rateInput = screen.getByRole('spinbutton', {\n      name: /Conversion Rate/i,\n    })\n    expect(rateInput).toHaveAttribute('type', 'number')\n    expect(rateInput).toHaveAttribute('min', '0')\n    expect(rateInput).toHaveAttribute('step', '0.0001')\n  })\n})\n\n// Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-04-21 01:19:05\n// Current User's Login: ibrahim-lasfar\n"],"names":["jest","mock","actual","requireActual","useFieldArray","mockFieldArray","mockDefaultCurrency","name","code","symbol","convertRate","mockDefaultValues","availableCurrencies","defaultCurrency","fields","append","fn","remove","TestComponent","form","useForm","defaultValues","FormProvider","CurrencyForm","id","describe","beforeEach","clearAllMocks","mockClear","it","render","expect","screen","getByText","toBeInTheDocument","addButton","fireEvent","click","toHaveBeenCalled","removeButton","getByTitle","toBeDisabled","select","getByRole","codeInput","toHaveAttribute","rateInput"],"mappings":";AAwBAA,KAAKC,IAAI,CAAC,mBAAmB;IAC3B,MAAMC,SAASF,KAAKG,aAAa,CAAC;IAClC,OAAO;QACL,GAAGD,MAAM;QACTE,eAAe,IAAMC;IACvB;AACF;;;;;uBA9B0C;qEACjB;+BACa;;;;;;AAGtC,MAAMC,sBAAsB;IAC1BC,MAAM;IACNC,MAAM;IACNC,QAAQ;IACRC,aAAa;AACf;AAEA,MAAMC,oBAAoB;IACxBC,qBAAqB;QAACN;KAAoB;IAC1CO,iBAAiB;AACnB;AAEA,4FAA4F;AAC5F,MAAMR,iBAAiB;IACrBS,QAAQ;QAACR;KAAoB;IAC7BS,QAAQf,KAAKgB,EAAE;IACfC,QAAQjB,KAAKgB,EAAE;AACjB;AAUA,SAASE;IACP,MAAMC,OAAOC,IAAAA,sBAAO,EAAgB;QAClCC,eAAeV;IACjB;IAEA,qBACE,qBAACW,2BAAY;QAAE,GAAGH,IAAI;kBACpB,cAAA,qBAACI,qBAAY;YAACJ,MAAMA;YAAMK,IAAG;;;AAGnC;AAEAC,SAAS,gBAAgB;IACvBC,WAAW;QACT1B,KAAK2B,aAAa;QAClBtB,eAAeU,MAAM,CAACa,SAAS;QAC/BvB,eAAeY,MAAM,CAACW,SAAS;IACjC;IAEAC,GAAG,gCAAgC;QACjCC,IAAAA,aAAM,gBAAC,qBAACZ;QACRa,OAAOC,aAAM,CAACC,SAAS,CAAC,sBAAsBC,iBAAiB;QAC/DH,OAAOC,aAAM,CAACC,SAAS,CAAC,mBAAmBC,iBAAiB;QAC5DH,OAAOC,aAAM,CAACC,SAAS,CAAC,mBAAmBC,iBAAiB;QAC5DH,OAAOC,aAAM,CAACC,SAAS,CAAC,qBAAqBC,iBAAiB;QAC9DH,OAAOC,aAAM,CAACC,SAAS,CAAC,qBAAqBC,iBAAiB;IAChE;IAEAL,GAAG,8BAA8B;QAC/BC,IAAAA,aAAM,gBAAC,qBAACZ;QACR,MAAMiB,YAAYH,aAAM,CAACC,SAAS,CAAC;QACnCG,gBAAS,CAACC,KAAK,CAACF;QAChBJ,OAAO1B,eAAeU,MAAM,EAAEuB,gBAAgB;IAChD;IAEAT,GAAG,mCAAmC;QACpCC,IAAAA,aAAM,gBAAC,qBAACZ;QACR,MAAMqB,eAAeP,aAAM,CAACQ,UAAU,CAAC;QACvCT,OAAOQ,cAAcE,YAAY;IACnC;IAEAZ,GAAG,qCAAqC;QACtCC,IAAAA,aAAM,gBAAC,qBAACZ;QACR,MAAMwB,SAASV,aAAM,CAACW,SAAS,CAAC,YAAY;YAAEpC,MAAM;QAAoB;QACxEwB,OAAOW,QAAQR,iBAAiB;IAClC;IAEAL,GAAG,qCAAqC;QACtCC,IAAAA,aAAM,gBAAC,qBAACZ;QACRa,OAAOC,aAAM,CAACC,SAAS,CAAC,sBAAsBC,iBAAiB;IACjE;IAEAL,GAAG,+CAA+C;QAChDC,IAAAA,aAAM,gBAAC,qBAACZ;QACR,MAAM0B,YAAYZ,aAAM,CAACW,SAAS,CAAC,WAAW;YAAEpC,MAAM;QAAiB;QACvEwB,OAAOa,WAAWC,eAAe,CAAC,aAAa;IACjD;IAEAhB,GAAG,iDAAiD;QAClDC,IAAAA,aAAM,gBAAC,qBAACZ;QACR,MAAM4B,YAAYd,aAAM,CAACW,SAAS,CAAC,cAAc;YAC/CpC,MAAM;QACR;QACAwB,OAAOe,WAAWD,eAAe,CAAC,QAAQ;QAC1Cd,OAAOe,WAAWD,eAAe,CAAC,OAAO;QACzCd,OAAOe,WAAWD,eAAe,CAAC,QAAQ;IAC5C;AACF,GAEA,mFAAmF;CACnF,uCAAuC"}