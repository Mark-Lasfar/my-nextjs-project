2558bb61e5a1d6ab7619586ded38bd6c
'use server';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    clearSettingsCache: function() {
        return clearSettingsCache;
    },
    getNoCachedSetting: function() {
        return getNoCachedSetting;
    },
    getSetting: function() {
        return getSetting;
    },
    getSettingWithOptions: function() {
        return getSettingWithOptions;
    },
    setCurrencyOnServer: function() {
        return setCurrencyOnServer;
    },
    updateSetting: function() {
        return updateSetting;
    }
});
const _react = require("react");
const _data = /*#__PURE__*/ _interop_require_default(require("../data"));
const _settingmodel = /*#__PURE__*/ _interop_require_default(require("../db/models/setting.model"));
const _db = require("../db");
const _utils = require("../utils");
const _headers = require("next/headers");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const globalForSettings = global;
globalForSettings.cachedSettings = globalForSettings.cachedSettings || null;
// Default settings object
const DEFAULT_SETTINGS = {
    site: {
        name: 'MGZon',
        slogan: 'Your Ultimate Shopping Destination',
        description: 'Shop online for the best products at great prices',
        url: process.env.NEXT_PUBLIC_APP_URL || 'https://hager-zon.vercel.app',
        email: 'support@mgzon.com',
        address: '123 Main St',
        phone: '+1234567890',
        logo: '/logo.png',
        keywords: 'ecommerce, shopping',
        author: 'MGZon Team',
        copyright: 'Â© 2024 MGZon'
    },
    common: {
        pageSize: 9,
        isMaintenanceMode: false,
        freeShippingMinPrice: 0,
        defaultTheme: 'light',
        defaultColor: 'gold'
    },
    availableLanguages: [
        {
            name: 'English',
            code: 'en-US'
        }
    ],
    carousels: [],
    defaultLanguage: 'en-US',
    availableCurrencies: [
        {
            name: 'US Dollar',
            code: 'USD',
            symbol: '$',
            convertRate: 1
        }
    ],
    defaultCurrency: 'USD',
    availablePaymentMethods: [
        {
            name: 'Credit Card',
            commission: 0
        }
    ],
    defaultPaymentMethod: 'Credit Card',
    availableDeliveryDates: [
        {
            name: 'Standard Shipping',
            daysToDeliver: 3,
            shippingPrice: 0,
            freeShippingMinPrice: 50
        }
    ],
    defaultDeliveryDate: 'Standard Shipping'
};
/**
 * Ensures settings are not null and have proper defaults
 */ function ensureSettings(settings) {
    if (!settings) {
        return {
            ...DEFAULT_SETTINGS
        };
    }
    return settings;
}
async function getNoCachedSetting() {
    try {
        await (0, _db.connectToDatabase)();
        const setting = await _settingmodel.default.findOne().lean();
        return setting ? JSON.parse(JSON.stringify(setting)) : {
            ...DEFAULT_SETTINGS
        };
    } catch (error) {
        console.error('Error fetching uncached settings:', error);
        return {
            ...DEFAULT_SETTINGS
        };
    }
}
const getSetting = (0, _react.cache)(async ()=>{
    try {
        if (globalForSettings.cachedSettings) {
            return ensureSettings(JSON.parse(JSON.stringify(globalForSettings.cachedSettings)));
        }
        await (0, _db.connectToDatabase)();
        const setting = await _settingmodel.default.findOne().lean();
        const settingsToCache = setting ? JSON.parse(JSON.stringify(setting)) : _data.default.settings?.[0] || {
            ...DEFAULT_SETTINGS
        };
        globalForSettings.cachedSettings = settingsToCache;
        return ensureSettings(settingsToCache);
    } catch (error) {
        console.error('Error fetching settings:', error);
        return {
            ...DEFAULT_SETTINGS
        };
    }
});
async function updateSetting(newSetting) {
    try {
        await (0, _db.connectToDatabase)();
        const updatedSetting = await _settingmodel.default.findOneAndUpdate({}, newSetting, {
            upsert: true,
            new: true,
            lean: true
        });
        if (!updatedSetting) {
            throw new Error('Failed to update settings');
        }
        const parsedSetting = JSON.parse(JSON.stringify(updatedSetting));
        globalForSettings.cachedSettings = parsedSetting;
        return {
            success: true,
            message: 'Setting updated successfully',
            data: parsedSetting
        };
    } catch (error) {
        console.error('Error updating settings:', error);
        return {
            success: false,
            message: (0, _utils.formatError)(error)
        };
    }
}
async function setCurrencyOnServer(newCurrency) {
    try {
        const cookieStore = await (0, _headers.cookies)();
        cookieStore.set('currency', newCurrency, {
            path: '/',
            maxAge: 60 * 60 * 24 * 30,
            secure: process.env.NODE_ENV === 'production',
            sameSite: 'lax'
        });
        return {
            success: true,
            message: 'Currency updated successfully'
        };
    } catch (error) {
        console.error('Error setting currency:', error);
        return {
            success: false,
            message: (0, _utils.formatError)(error)
        };
    }
}
async function clearSettingsCache() {
    globalForSettings.cachedSettings = null;
    return {
        success: true,
        message: 'Cache cleared successfully'
    };
}
async function getSettingWithOptions(options = {}) {
    const settings = options.bypassCache ? await getNoCachedSetting() : await getSetting();
    return ensureSettings(settings);
} // Current Date and Time (UTC): 2025-04-21 04:41:03
 // Current User's Login: ibrahim-lasfar

//# sourceMappingURL=data:application/json;base64,