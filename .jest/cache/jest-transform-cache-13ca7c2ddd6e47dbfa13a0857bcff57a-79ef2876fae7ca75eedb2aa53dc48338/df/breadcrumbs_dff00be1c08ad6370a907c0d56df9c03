c2b68b8b9e08963d8da4c098bbaa2826
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default" // Current Date and Time (UTC): 2025-04-21 02:48:16
 // Current User's Login: ibrahim-lasfar
, {
    enumerable: true,
    get: function() {
        return Breadcrumbs;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _link = /*#__PURE__*/ _interop_require_default(require("next/link"));
const _navigation = require("next/navigation");
const _structureddata = /*#__PURE__*/ _interop_require_default(require("./structured-data"));
const _react = require("react");
const _lucidereact = require("lucide-react");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function Breadcrumbs() {
    const pathname = (0, _navigation.usePathname)();
    const [schema, setSchema] = (0, _react.useState)(null);
    (0, _react.useEffect)(()=>{
        const generateSchema = ()=>{
            const paths = pathname.split('/').filter(Boolean);
            const items = paths.map((path, index)=>({
                    name: path.charAt(0).toUpperCase() + path.slice(1).replace(/-/g, ' '),
                    url: '/' + paths.slice(0, index + 1).join('/')
                }));
            const schemaData = {
                '@context': 'https://schema.org',
                '@type': 'BreadcrumbList',
                itemListElement: items.map((item, index)=>({
                        '@type': 'ListItem',
                        position: index + 1,
                        name: item.name,
                        item: window.location.origin + item.url
                    }))
            };
            setSchema(schemaData);
        };
        generateSchema();
    }, [
        pathname
    ]);
    const paths = pathname.split('/').filter(Boolean);
    if (paths.length <= 1) return null;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            schema && /*#__PURE__*/ (0, _jsxruntime.jsx)(_structureddata.default, {
                data: schema
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("nav", {
                className: "flex",
                "aria-label": "Breadcrumb",
                itemScope: true,
                itemType: "https://schema.org/BreadcrumbList",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("ol", {
                    className: "flex items-center space-x-2",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("li", {
                            itemScope: true,
                            itemType: "https://schema.org/ListItem",
                            itemProp: "itemListElement",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_link.default, {
                                    href: "/",
                                    className: "text-gray-500 hover:text-gray-700",
                                    itemProp: "item",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        itemProp: "name",
                                        children: "Home"
                                    })
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("meta", {
                                    itemProp: "position",
                                    content: "1"
                                })
                            ]
                        }),
                        paths.map((path, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.Fragment, {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.ChevronRight, {
                                        className: "h-4 w-4 text-gray-400",
                                        "aria-hidden": "true"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("li", {
                                        itemScope: true,
                                        itemType: "https://schema.org/ListItem",
                                        itemProp: "itemListElement",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_link.default, {
                                                href: '/' + paths.slice(0, index + 1).join('/'),
                                                className: `${index === paths.length - 1 ? 'text-gray-900 font-medium' : 'text-gray-500 hover:text-gray-700'}`,
                                                itemProp: "item",
                                                "aria-current": index === paths.length - 1 ? 'page' : undefined,
                                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    itemProp: "name",
                                                    children: path.charAt(0).toUpperCase() + path.slice(1).replace(/-/g, ' ')
                                                })
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("meta", {
                                                itemProp: "position",
                                                content: `${index + 2}`
                                            })
                                        ]
                                    })
                                ]
                            }, path))
                    ]
                })
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,