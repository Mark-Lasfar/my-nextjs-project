{"version":3,"sources":["/home/mark/Downloads/nextjs-amazona-main/components/breadcrumbs.tsx"],"sourcesContent":["'use client'\n\nimport Link from 'next/link'\nimport { usePathname } from 'next/navigation'\nimport StructuredData from './structured-data'\nimport { Fragment, useEffect, useState } from 'react'\nimport { ChevronRight } from 'lucide-react'\n\ninterface BreadcrumbItem {\n  name: string\n  url: string\n}\n\ninterface BreadcrumbSchemaItem {\n  '@type': 'ListItem'\n  position: number\n  name: string\n  item: string\n}\n\ninterface BreadcrumbSchema {\n  '@context': 'https://schema.org'\n  '@type': 'BreadcrumbList'\n  itemListElement: BreadcrumbSchemaItem[]\n  [key: string]: unknown\n}\n\nexport default function Breadcrumbs() {\n  const pathname = usePathname()\n  const [schema, setSchema] = useState<BreadcrumbSchema | null>(null)\n\n  useEffect(() => {\n    const generateSchema = () => {\n      const paths = pathname.split('/').filter(Boolean)\n      const items: BreadcrumbItem[] = paths.map((path, index) => ({\n        name: path.charAt(0).toUpperCase() + path.slice(1).replace(/-/g, ' '),\n        url: '/' + paths.slice(0, index + 1).join('/'),\n      }))\n\n      const schemaData: BreadcrumbSchema = {\n        '@context': 'https://schema.org',\n        '@type': 'BreadcrumbList',\n        itemListElement: items.map((item, index) => ({\n          '@type': 'ListItem',\n          position: index + 1,\n          name: item.name,\n          item: window.location.origin + item.url,\n        })),\n      }\n\n      setSchema(schemaData)\n    }\n\n    generateSchema()\n  }, [pathname])\n\n  const paths = pathname.split('/').filter(Boolean)\n\n  if (paths.length <= 1) return null\n\n  return (\n    <>\n      {schema && <StructuredData data={schema} />}\n      <nav\n        className=\"flex\"\n        aria-label=\"Breadcrumb\"\n        itemScope\n        itemType=\"https://schema.org/BreadcrumbList\"\n      >\n        <ol className=\"flex items-center space-x-2\">\n          <li\n            itemScope\n            itemType=\"https://schema.org/ListItem\"\n            itemProp=\"itemListElement\"\n          >\n            <Link\n              href=\"/\"\n              className=\"text-gray-500 hover:text-gray-700\"\n              itemProp=\"item\"\n            >\n              <span itemProp=\"name\">Home</span>\n            </Link>\n            <meta itemProp=\"position\" content=\"1\" />\n          </li>\n          {paths.map((path, index) => (\n            <Fragment key={path}>\n              <ChevronRight\n                className=\"h-4 w-4 text-gray-400\"\n                aria-hidden=\"true\"\n              />\n              <li\n                itemScope\n                itemType=\"https://schema.org/ListItem\"\n                itemProp=\"itemListElement\"\n              >\n                <Link\n                  href={'/' + paths.slice(0, index + 1).join('/')}\n                  className={`${\n                    index === paths.length - 1\n                      ? 'text-gray-900 font-medium'\n                      : 'text-gray-500 hover:text-gray-700'\n                  }`}\n                  itemProp=\"item\"\n                  aria-current={index === paths.length - 1 ? 'page' : undefined}\n                >\n                  <span itemProp=\"name\">\n                    {path.charAt(0).toUpperCase() + path.slice(1).replace(/-/g, ' ')}\n                  </span>\n                </Link>\n                <meta itemProp=\"position\" content={`${index + 2}`} />\n              </li>\n            </Fragment>\n          ))}\n        </ol>\n      </nav>\n    </>\n  )\n}\n\n// Current Date and Time (UTC): 2025-04-21 02:48:16\n// Current User's Login: ibrahim-lasfar"],"names":["Breadcrumbs","pathname","usePathname","schema","setSchema","useState","useEffect","generateSchema","paths","split","filter","Boolean","items","map","path","index","name","charAt","toUpperCase","slice","replace","url","join","schemaData","itemListElement","item","position","window","location","origin","length","StructuredData","data","nav","className","aria-label","itemScope","itemType","ol","li","itemProp","Link","href","span","meta","content","Fragment","ChevronRight","aria-hidden","aria-current","undefined"],"mappings":"AAAA;;;;;+BA2BA,UA4FA,mDAAmD;CACnD,uCAAuC;;;;eA7FfA;;;;6DAzBP;4BACW;uEACD;uBACmB;6BACjB;;;;;;AAqBd,SAASA;IACtB,MAAMC,WAAWC,IAAAA,uBAAW;IAC5B,MAAM,CAACC,QAAQC,UAAU,GAAGC,IAAAA,eAAQ,EAA0B;IAE9DC,IAAAA,gBAAS,EAAC;QACR,MAAMC,iBAAiB;YACrB,MAAMC,QAAQP,SAASQ,KAAK,CAAC,KAAKC,MAAM,CAACC;YACzC,MAAMC,QAA0BJ,MAAMK,GAAG,CAAC,CAACC,MAAMC,QAAW,CAAA;oBAC1DC,MAAMF,KAAKG,MAAM,CAAC,GAAGC,WAAW,KAAKJ,KAAKK,KAAK,CAAC,GAAGC,OAAO,CAAC,MAAM;oBACjEC,KAAK,MAAMb,MAAMW,KAAK,CAAC,GAAGJ,QAAQ,GAAGO,IAAI,CAAC;gBAC5C,CAAA;YAEA,MAAMC,aAA+B;gBACnC,YAAY;gBACZ,SAAS;gBACTC,iBAAiBZ,MAAMC,GAAG,CAAC,CAACY,MAAMV,QAAW,CAAA;wBAC3C,SAAS;wBACTW,UAAUX,QAAQ;wBAClBC,MAAMS,KAAKT,IAAI;wBACfS,MAAME,OAAOC,QAAQ,CAACC,MAAM,GAAGJ,KAAKJ,GAAG;oBACzC,CAAA;YACF;YAEAjB,UAAUmB;QACZ;QAEAhB;IACF,GAAG;QAACN;KAAS;IAEb,MAAMO,QAAQP,SAASQ,KAAK,CAAC,KAAKC,MAAM,CAACC;IAEzC,IAAIH,MAAMsB,MAAM,IAAI,GAAG,OAAO;IAE9B,qBACE;;YACG3B,wBAAU,qBAAC4B,uBAAc;gBAACC,MAAM7B;;0BACjC,qBAAC8B;gBACCC,WAAU;gBACVC,cAAW;gBACXC,SAAS;gBACTC,UAAS;0BAET,cAAA,sBAACC;oBAAGJ,WAAU;;sCACZ,sBAACK;4BACCH,SAAS;4BACTC,UAAS;4BACTG,UAAS;;8CAET,qBAACC,aAAI;oCACHC,MAAK;oCACLR,WAAU;oCACVM,UAAS;8CAET,cAAA,qBAACG;wCAAKH,UAAS;kDAAO;;;8CAExB,qBAACI;oCAAKJ,UAAS;oCAAWK,SAAQ;;;;wBAEnCrC,MAAMK,GAAG,CAAC,CAACC,MAAMC,sBAChB,sBAAC+B,eAAQ;;kDACP,qBAACC,yBAAY;wCACXb,WAAU;wCACVc,eAAY;;kDAEd,sBAACT;wCACCH,SAAS;wCACTC,UAAS;wCACTG,UAAS;;0DAET,qBAACC,aAAI;gDACHC,MAAM,MAAMlC,MAAMW,KAAK,CAAC,GAAGJ,QAAQ,GAAGO,IAAI,CAAC;gDAC3CY,WAAW,GACTnB,UAAUP,MAAMsB,MAAM,GAAG,IACrB,8BACA,qCACJ;gDACFU,UAAS;gDACTS,gBAAclC,UAAUP,MAAMsB,MAAM,GAAG,IAAI,SAASoB;0DAEpD,cAAA,qBAACP;oDAAKH,UAAS;8DACZ1B,KAAKG,MAAM,CAAC,GAAGC,WAAW,KAAKJ,KAAKK,KAAK,CAAC,GAAGC,OAAO,CAAC,MAAM;;;0DAGhE,qBAACwB;gDAAKJ,UAAS;gDAAWK,SAAS,GAAG9B,QAAQ,GAAG;;;;;+BAxBtCD;;;;;;AAgC3B"}