{"version":3,"sources":["/home/mark/Downloads/nextjs-amazona-main/__tests__/components/settings/currency-form.test.tsx"],"sourcesContent":["import { render, screen, fireEvent } from '@testing-library/react'\nimport CurrencyForm from '@/app/[locale]/admin/settings/currency-form'\nimport { FormProvider, useForm } from 'react-hook-form'\nimport { ISettingInput } from '@/types'\n\n// Mock custom hooks\nconst mockDefaultCurrency = {\n  name: 'US Dollar',\n  code: 'USD',\n  symbol: '$',\n  convertRate: 1,\n}\n\nconst mockDefaultValues = {\n  availableCurrencies: [mockDefaultCurrency],\n  defaultCurrency: 'USD',\n}\n\n// Create form mock with all required properties\nconst createMockFormContext = () => ({\n  control: {\n    _defaultValues: mockDefaultValues,\n    _formState: { errors: {} },\n    array: true,\n    _names: {\n      array: new Set(),\n      mount: new Set(),\n      unMount: new Set(),\n      watch: new Set(),\n      focus: '',\n    },\n    _options: { mode: 'all' },\n    _updateValid: jest.fn(),\n    _getWatch: jest.fn(),\n    _formValues: mockDefaultValues,\n    _subjects: {\n      watch: { next: jest.fn() },\n      array: { next: jest.fn() },\n      state: { next: jest.fn() },\n    },\n  },\n  getValues: jest.fn().mockReturnValue(mockDefaultValues),\n  setValue: jest.fn(),\n  register: jest.fn(),\n  watch: jest.fn().mockReturnValue(mockDefaultValues.availableCurrencies),\n  formState: { errors: {} },\n  getFieldState: jest.fn(() => ({ error: null })),\n})\n\n// Mock useFieldArray\nconst mockFieldArray = {\n  fields: [mockDefaultCurrency],\n  append: jest.fn(),\n  remove: jest.fn(),\n}\n\n// Mock the hooks\njest.mock('react-hook-form', () => ({\n  ...jest.requireActual('react-hook-form'),\n  useForm: () => createMockFormContext(),\n  useFormContext: () => createMockFormContext(),\n  useFieldArray: () => mockFieldArray,\n  register: jest.fn(), // Add this line to mock the register function\n}))\n\n// Test component wrapper\nfunction TestComponent() {\n  const form = useForm<ISettingInput>({\n    defaultValues: mockDefaultValues,\n  })\n\n  return (\n    <FormProvider {...form}>\n      <CurrencyForm form={form} id=\"currency-form\" />\n    </FormProvider>\n  )\n}\n\ndescribe('CurrencyForm', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    mockFieldArray.append.mockClear()\n    mockFieldArray.remove.mockClear()\n  })\n\n  it('renders currency form fields', () => {\n    render(<TestComponent />)\n    expect(screen.getByText('Currency Settings')).toBeInTheDocument()\n    expect(screen.getByText(/Currency Name/i)).toBeInTheDocument()\n    expect(screen.getByText(/Currency Code/i)).toBeInTheDocument()\n    expect(screen.getByText(/Currency Symbol/i)).toBeInTheDocument()\n    expect(screen.getByText(/Conversion Rate/i)).toBeInTheDocument()\n  })\n\n  it('allows adding new currency', () => {\n    render(<TestComponent />)\n    const addButton = screen.getByText('Add New Currency')\n    fireEvent.click(addButton)\n    expect(mockFieldArray.append).toHaveBeenCalled()\n  })\n\n  it('prevents removing last currency', () => {\n    render(<TestComponent />)\n    const removeButton = screen.getByTitle('Cannot remove last currency')\n    expect(removeButton).toBeDisabled()\n  })\n\n  it('allows selecting default currency', () => {\n    render(<TestComponent />)\n    const select = screen.getByRole('combobox', { name: /Default Currency/i })\n    expect(select).toBeInTheDocument()\n  })\n\n  it('displays currency settings header', () => {\n    render(<TestComponent />)\n    expect(screen.getByText('Currency Settings')).toBeInTheDocument()\n  })\n\n  it('has correct currency code input constraints', () => {\n    render(<TestComponent />)\n    const codeInput = screen.getByRole('textbox', { name: /Currency Code/i })\n    expect(codeInput).toHaveAttribute('maxLength', '3')\n  })\n\n  it('has correct conversion rate input constraints', () => {\n    render(<TestComponent />)\n    const rateInput = screen.getByRole('spinbutton', { name: /Conversion Rate/i })\n    expect(rateInput).toHaveAttribute('type', 'number')\n    expect(rateInput).toHaveAttribute('min', '0')\n    expect(rateInput).toHaveAttribute('step', '0.0001')\n  })\n})\n\n// Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-04-21 01:03:01\n// Current User's Login: ibrahim-lasfar"],"names":["jest","mock","requireActual","useForm","createMockFormContext","useFormContext","useFieldArray","mockFieldArray","register","fn","mockDefaultCurrency","name","code","symbol","convertRate","mockDefaultValues","availableCurrencies","defaultCurrency","control","_defaultValues","_formState","errors","array","_names","Set","mount","unMount","watch","focus","_options","mode","_updateValid","_getWatch","_formValues","_subjects","next","state","getValues","mockReturnValue","setValue","formState","getFieldState","error","fields","append","remove","TestComponent","form","defaultValues","FormProvider","CurrencyForm","id","describe","beforeEach","clearAllMocks","mockClear","it","render","expect","screen","getByText","toBeInTheDocument","addButton","fireEvent","click","toHaveBeenCalled","removeButton","getByTitle","toBeDisabled","select","getByRole","codeInput","toHaveAttribute","rateInput"],"mappings":"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"}