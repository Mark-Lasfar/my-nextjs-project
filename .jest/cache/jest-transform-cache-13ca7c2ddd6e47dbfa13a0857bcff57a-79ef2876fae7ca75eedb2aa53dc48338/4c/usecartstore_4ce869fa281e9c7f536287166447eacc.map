{"version":3,"names":["cov_1u385um3wb","actualCoverage","s","_default","initialState","items","itemsPrice","taxPrice","undefined","shippingPrice","totalPrice","paymentMethod","shippingAddress","deliveryDateIndex","useCartStore","_zustand","create","_middleware","persist","set","get","f","cart","addItem","item","quantity","existItem","find","x","b","product","color","size","countInStock","Error","updatedCartItems","map","_orderactions","calcDeliveryDateAndPrice","foundItem","clientId","updateItem","exist","removeItem","filter","setShippingAddress","setPaymentMethod","setDeliveryDateIndex","index","clearCart","init","name"],"sources":["/home/mark/Downloads/nextjs-amazona-main/hooks/use-cart-store.ts"],"sourcesContent":["import { create } from 'zustand'\nimport { persist } from 'zustand/middleware'\n\nimport { Cart, OrderItem, ShippingAddress } from '@/types'\nimport { calcDeliveryDateAndPrice } from '@/lib/actions/order.actions'\n\nconst initialState: Cart = {\n  items: [],\n  itemsPrice: 0,\n  taxPrice: undefined,\n  shippingPrice: undefined,\n  totalPrice: 0,\n  paymentMethod: undefined,\n  shippingAddress: undefined,\n  deliveryDateIndex: undefined,\n}\n\ninterface CartState {\n  cart: Cart\n  addItem: (item: OrderItem, quantity: number) => Promise<string>\n  updateItem: (item: OrderItem, quantity: number) => Promise<void>\n  removeItem: (item: OrderItem) => void\n  clearCart: () => void\n  setShippingAddress: (shippingAddress: ShippingAddress) => Promise<void>\n  setPaymentMethod: (paymentMethod: string) => void\n  setDeliveryDateIndex: (index: number) => Promise<void>\n}\n\nconst useCartStore = create(\n  persist<CartState>(\n    (set, get) => ({\n      cart: initialState,\n\n      addItem: async (item: OrderItem, quantity: number) => {\n        const { items, shippingAddress } = get().cart\n        const existItem = items.find(\n          (x) =>\n            x.product === item.product &&\n            x.color === item.color &&\n            x.size === item.size\n        )\n\n        if (existItem) {\n          if (existItem.countInStock < quantity + existItem.quantity) {\n            throw new Error('Not enough items in stock')\n          }\n        } else {\n          if (item.countInStock < item.quantity) {\n            throw new Error('Not enough items in stock')\n          }\n        }\n\n        const updatedCartItems = existItem\n          ? items.map((x) =>\n              x.product === item.product &&\n              x.color === item.color &&\n              x.size === item.size\n                ? { ...existItem, quantity: existItem.quantity + quantity }\n                : x\n            )\n          : [...items, { ...item, quantity }]\n\n        set({\n          cart: {\n            ...get().cart,\n            items: updatedCartItems,\n            ...(await calcDeliveryDateAndPrice({\n              items: updatedCartItems,\n              shippingAddress,\n            })),\n          },\n        })\n        const foundItem = updatedCartItems.find(\n          (x) =>\n            x.product === item.product &&\n            x.color === item.color &&\n            x.size === item.size\n        )\n        if (!foundItem) {\n          throw new Error('Item not found in cart')\n        }\n        return foundItem.clientId\n      },\n      updateItem: async (item: OrderItem, quantity: number) => {\n        const { items, shippingAddress } = get().cart\n        const exist = items.find(\n          (x) =>\n            x.product === item.product &&\n            x.color === item.color &&\n            x.size === item.size\n        )\n        if (!exist) return\n        const updatedCartItems = items.map((x) =>\n          x.product === item.product &&\n          x.color === item.color &&\n          x.size === item.size\n            ? { ...exist, quantity: quantity }\n            : x\n        )\n        set({\n          cart: {\n            ...get().cart,\n            items: updatedCartItems,\n            ...(await calcDeliveryDateAndPrice({\n              items: updatedCartItems,\n              shippingAddress,\n            })),\n          },\n        })\n      },\n      removeItem: async (item: OrderItem) => {\n        const { items, shippingAddress } = get().cart\n        const updatedCartItems = items.filter(\n          (x) =>\n            x.product !== item.product ||\n            x.color !== item.color ||\n            x.size !== item.size\n        )\n        set({\n          cart: {\n            ...get().cart,\n            items: updatedCartItems,\n            ...(await calcDeliveryDateAndPrice({\n              items: updatedCartItems,\n              shippingAddress,\n            })),\n          },\n        })\n      },\n      setShippingAddress: async (shippingAddress: ShippingAddress) => {\n        const { items } = get().cart\n        set({\n          cart: {\n            ...get().cart,\n            shippingAddress,\n            ...(await calcDeliveryDateAndPrice({\n              items,\n              shippingAddress,\n            })),\n          },\n        })\n      },\n      setPaymentMethod: (paymentMethod: string) => {\n        set({\n          cart: {\n            ...get().cart,\n            paymentMethod,\n          },\n        })\n      },\n      setDeliveryDateIndex: async (index: number) => {\n        const { items, shippingAddress } = get().cart\n\n        set({\n          cart: {\n            ...get().cart,\n            ...(await calcDeliveryDateAndPrice({\n              items,\n              shippingAddress,\n              deliveryDateIndex: index,\n            })),\n          },\n        })\n      },\n      clearCart: () => {\n        set({\n          cart: {\n            ...get().cart,\n            items: [],\n          },\n        })\n      },\n      init: () => set({ cart: initialState }),\n    }),\n\n    {\n      name: 'cart-store',\n    }\n  )\n)\nexport default useCartStore\n"],"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","ignoreList":[]}