212232c6cdb6562c53197dc760380098
"use strict";
jest.mock('react-hook-form', ()=>({
        ...jest.requireActual('react-hook-form'),
        useForm: ()=>mockForm,
        useFormContext: ()=>({
                ...mockForm,
                getFieldState: jest.fn(()=>({
                        error: null
                    }))
            }),
        useFieldArray: ()=>({
                fields: mockWatchValue,
                append: jest.fn(),
                remove: jest.fn()
            })
    }));
jest.mock('react', ()=>({
        ...jest.requireActual('react'),
        useState: jest.fn().mockImplementation((initial)=>[
                initial,
                jest.fn()
            ]),
        useMemo: jest.fn().mockImplementation((fn)=>fn())
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _currencyform = /*#__PURE__*/ _interop_require_default(require("../../../app/[locale]/admin/settings/currency-form"));
const _reacthookform = require("react-hook-form");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockDefaultValues = {
    availableCurrencies: [
        {
            name: 'US Dollar',
            code: 'USD',
            symbol: '$',
            convertRate: 1
        }
    ],
    defaultCurrency: 'USD',
    site: {
        name: 'Test Store'
    }
};
const mockWatchValue = [
    {
        name: 'US Dollar',
        code: 'USD',
        symbol: '$',
        convertRate: 1
    }
];
// Mock form context
const mockForm = {
    register: jest.fn(),
    setValue: jest.fn(),
    getValues: jest.fn().mockReturnValue(mockDefaultValues),
    watch: jest.fn().mockReturnValue(mockWatchValue),
    formState: {
        errors: {}
    },
    control: {},
    handleSubmit: jest.fn()
};
// Test component wrapper
function TestComponent() {
    const form = (0, _reacthookform.useForm)({
        defaultValues: mockDefaultValues
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reacthookform.FormProvider, {
        ...form,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_currencyform.default, {
            form: form,
            id: "currency-form"
        })
    });
}
describe('CurrencyForm', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('renders currency form fields', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        expect(_react.screen.getByText('Currency Settings')).toBeInTheDocument();
        expect(_react.screen.getByText(/Currency Name/i)).toBeInTheDocument();
        expect(_react.screen.getByText(/Currency Code/i)).toBeInTheDocument();
        expect(_react.screen.getByText(/Currency Symbol/i)).toBeInTheDocument();
        expect(_react.screen.getByText(/Conversion Rate/i)).toBeInTheDocument();
    });
    it('allows adding new currency', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const addButton = _react.screen.getByText('Add New Currency');
        expect(addButton).toBeInTheDocument();
        _react.fireEvent.click(addButton);
    });
    it('prevents removing last currency', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const removeButton = _react.screen.getByTitle('Cannot remove last currency');
        expect(removeButton).toBeDisabled();
    });
    it('allows selecting default currency', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const select = _react.screen.getByRole('combobox', {
            name: /Default Currency/i
        });
        expect(select).toBeInTheDocument();
    });
    it('displays currency settings header', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        expect(_react.screen.getByText('Currency Settings')).toBeInTheDocument();
    });
    it('has correct currency code input constraints', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const inputs = _react.screen.getAllByRole('textbox');
        const codeInput = inputs.find((input)=>input.getAttribute('name')?.includes('code'));
        expect(codeInput).toHaveAttribute('maxLength', '3');
    });
    it('has correct conversion rate input constraints', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const rateInput = _react.screen.getByRole('spinbutton');
        expect(rateInput).toHaveAttribute('type', 'number');
        expect(rateInput).toHaveAttribute('min', '0');
        expect(rateInput).toHaveAttribute('step', '0.0001');
    });
}) // Current Date and Time (UTC): 2025-04-20 23:04:28
 // Current User's Login: ibrahim-lasfar
;

//# sourceMappingURL=data:application/json;base64,