91250939ee80d5d4c4e9c06314ec6d7a
"use strict";
// Mock the hooks
jest.mock('react-hook-form', ()=>({
        ...jest.requireActual('react-hook-form'),
        useForm: ()=>createMockFormContext(),
        useFormContext: ()=>createMockFormContext(),
        useFieldArray: ()=>mockFieldArray,
        register: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _currencyform = /*#__PURE__*/ _interop_require_default(require("../../../app/[locale]/admin/settings/currency-form"));
const _reacthookform = require("react-hook-form");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock custom hooks
const mockDefaultCurrency = {
    name: 'US Dollar',
    code: 'USD',
    symbol: '$',
    convertRate: 1
};
const mockDefaultValues = {
    availableCurrencies: [
        mockDefaultCurrency
    ],
    defaultCurrency: 'USD'
};
// Create form mock with all required properties
const createMockFormContext = ()=>({
        control: {
            _defaultValues: mockDefaultValues,
            _formState: {
                errors: {}
            },
            array: true,
            _names: {
                array: new Set(),
                mount: new Set(),
                unMount: new Set(),
                watch: new Set(),
                focus: ''
            },
            _options: {
                mode: 'all'
            },
            _updateValid: jest.fn(),
            _getWatch: jest.fn(),
            _formValues: mockDefaultValues,
            _subjects: {
                watch: {
                    next: jest.fn()
                },
                array: {
                    next: jest.fn()
                },
                state: {
                    next: jest.fn()
                }
            }
        },
        getValues: jest.fn().mockReturnValue(mockDefaultValues),
        setValue: jest.fn(),
        register: jest.fn(),
        watch: jest.fn().mockReturnValue(mockDefaultValues.availableCurrencies),
        formState: {
            errors: {}
        },
        getFieldState: jest.fn(()=>({
                error: null
            }))
    });
// Mock useFieldArray
const mockFieldArray = {
    fields: [
        mockDefaultCurrency
    ],
    append: jest.fn(),
    remove: jest.fn()
};
// Test component wrapper
function TestComponent() {
    const form = (0, _reacthookform.useForm)({
        defaultValues: mockDefaultValues
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reacthookform.FormProvider, {
        ...form,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_currencyform.default, {
            form: form,
            id: "currency-form"
        })
    });
}
describe('CurrencyForm', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        mockFieldArray.append.mockClear();
        mockFieldArray.remove.mockClear();
    });
    it('renders currency form fields', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        expect(_react.screen.getByText('Currency Settings')).toBeInTheDocument();
        expect(_react.screen.getByText(/Currency Name/i)).toBeInTheDocument();
        expect(_react.screen.getByText(/Currency Code/i)).toBeInTheDocument();
        expect(_react.screen.getByText(/Currency Symbol/i)).toBeInTheDocument();
        expect(_react.screen.getByText(/Conversion Rate/i)).toBeInTheDocument();
    });
    it('allows adding new currency', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const addButton = _react.screen.getByText('Add New Currency');
        _react.fireEvent.click(addButton);
        expect(mockFieldArray.append).toHaveBeenCalled();
    });
    it('prevents removing last currency', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const removeButton = _react.screen.getByTitle('Cannot remove last currency');
        expect(removeButton).toBeDisabled();
    });
    it('allows selecting default currency', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const select = _react.screen.getByRole('combobox', {
            name: /Default Currency/i
        });
        expect(select).toBeInTheDocument();
    });
    it('displays currency settings header', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        expect(_react.screen.getByText('Currency Settings')).toBeInTheDocument();
    });
    it('has correct currency code input constraints', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const codeInput = _react.screen.getByRole('textbox', {
            name: /Currency Code/i
        });
        expect(codeInput).toHaveAttribute('maxLength', '3');
    });
    it('has correct conversion rate input constraints', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const rateInput = _react.screen.getByRole('spinbutton', {
            name: /Conversion Rate/i
        });
        expect(rateInput).toHaveAttribute('type', 'number');
        expect(rateInput).toHaveAttribute('min', '0');
        expect(rateInput).toHaveAttribute('step', '0.0001');
    });
}) // Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-04-21 01:03:01
 // Current User's Login: ibrahim-lasfar
;

//# sourceMappingURL=data:application/json;base64,