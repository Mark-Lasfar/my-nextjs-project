534a450c5d848e85552f998bb6af64be
"use strict";
// Mock the database connection and models
jest.mock('@/lib/db', ()=>({
        connectToDatabase: jest.fn()
    }));
jest.mock('@/lib/db/models/setting.model', ()=>({
        findOne: jest.fn(),
        findOneAndUpdate: jest.fn()
    }));
jest.mock('next/headers', ()=>({
        cookies: ()=>({
                set: mockSet
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _settingactions = require("../../../lib/actions/setting.actions");
const _db = require("../../../lib/db");
const _settingmodel = /*#__PURE__*/ _interop_require_default(require("../../../lib/db/models/setting.model"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockSet = jest.fn();
describe('Setting Actions', ()=>{
    const mockSetting = {
        site: {
            name: 'Test Store',
            slogan: 'Test Slogan',
            description: 'Test Description',
            url: 'https://test.com',
            email: 'test@test.com',
            address: '123 Test St',
            phone: '123-456-7890',
            logo: '/logo.png',
            keywords: 'test, store',
            author: 'Test Author',
            copyright: 'Â© 2024 Test'
        },
        common: {
            pageSize: 9,
            isMaintenanceMode: false,
            freeShippingMinPrice: 0,
            defaultTheme: 'light',
            defaultColor: 'gold'
        },
        availableLanguages: [
            {
                name: 'English',
                code: 'en-US'
            }
        ],
        carousels: [],
        defaultLanguage: 'en-US',
        availableCurrencies: [
            {
                name: 'US Dollar',
                code: 'USD',
                symbol: '$',
                convertRate: 1
            }
        ],
        defaultCurrency: 'USD',
        availablePaymentMethods: [
            {
                name: 'Credit Card',
                commission: 0
            }
        ],
        defaultPaymentMethod: 'Credit Card',
        availableDeliveryDates: [
            {
                name: 'Standard Shipping',
                daysToDeliver: 3,
                shippingPrice: 0,
                freeShippingMinPrice: 50
            }
        ],
        defaultDeliveryDate: 'Standard Shipping'
    };
    beforeEach(()=>{
        jest.resetModules();
        jest.clearAllMocks();
        _settingmodel.default.findOne.mockImplementation(()=>({
                lean: ()=>Promise.resolve(mockSetting)
            }));
        _settingmodel.default.findOneAndUpdate.mockResolvedValue(mockSetting);
        _db.connectToDatabase.mockResolvedValue(undefined);
        mockSet.mockClear();
    });
    describe('getSetting', ()=>{
        it('should get settings from cache if available', async ()=>{
            await (0, _settingactions.getSetting)();
            jest.clearAllMocks();
            const result = await (0, _settingactions.getSetting)();
            expect(result).toBeDefined();
            expect(result.site.name).toBe('Test Store');
            expect(_db.connectToDatabase).not.toHaveBeenCalled();
        });
        it('should get settings from database if not cached', async ()=>{
            await (0, _settingactions.clearSettingsCache)();
            const result = await (0, _settingactions.getSetting)();
            expect(result).toBeDefined();
            expect(result.site.name).toBe('Test Store');
            expect(_db.connectToDatabase).toHaveBeenCalled();
        });
        it('should return default settings if database query fails', async ()=>{
            ;
            _settingmodel.default.findOne.mockImplementation(()=>{
                throw new Error('Database error');
            });
            const result = await (0, _settingactions.getSetting)();
            expect(result).toBeDefined();
            expect(result.site.name).toBe('Test Store');
        });
        it('should handle empty database result', async ()=>{
            ;
            _settingmodel.default.findOne.mockImplementation(()=>({
                    lean: ()=>Promise.resolve(null)
                }));
            const result = await (0, _settingactions.getSetting)();
            expect(result).toBeDefined();
            expect(result.site.name).toBe('Test Store');
        });
    });
    describe('getNoCachedSetting', ()=>{
        it('should get settings directly from database', async ()=>{
            const result = await (0, _settingactions.getNoCachedSetting)();
            expect(result).toBeDefined();
            expect(result.site.name).toBe('Test Store');
            expect(_db.connectToDatabase).toHaveBeenCalled();
        });
        it('should return default settings on error', async ()=>{
            ;
            _settingmodel.default.findOne.mockImplementation(()=>{
                throw new Error('Database error');
            });
            const result = await (0, _settingactions.getNoCachedSetting)();
            expect(result).toBeDefined();
            // Update expectation to reflect actual default name in error case
            expect(result.site.name).toBe('MGZon');
        });
    });
    describe('updateSetting', ()=>{
        it('should update settings successfully', async ()=>{
            const newSettings = {
                ...mockSetting,
                site: {
                    ...mockSetting.site,
                    name: 'Updated Store'
                }
            };
            const result = await (0, _settingactions.updateSetting)(newSettings);
            expect(result.success).toBe(true);
            expect(result.message).toBe('Setting updated successfully');
            expect(result.data).toBeDefined();
        });
        it('should handle database update errors', async ()=>{
            ;
            _settingmodel.default.findOneAndUpdate.mockRejectedValue(new Error('Update failed'));
            const result = await (0, _settingactions.updateSetting)(mockSetting);
            expect(result.success).toBe(false);
            expect(result.message).toBeDefined();
        });
        it('should handle null update result', async ()=>{
            ;
            _settingmodel.default.findOneAndUpdate.mockResolvedValue(null);
            const result = await (0, _settingactions.updateSetting)(mockSetting);
            expect(result.success).toBe(false);
            expect(result.message).toBe('Failed to update settings');
        });
    });
    describe('setCurrencyOnServer', ()=>{
        it('should set currency cookie successfully', async ()=>{
            const result = await (0, _settingactions.setCurrencyOnServer)('USD');
            expect(result.success).toBe(true);
            expect(result.message).toBe('Currency updated successfully');
        });
        it('should handle cookie setting errors', async ()=>{
            mockSet.mockImplementation(()=>{
                throw new Error('Cookie error');
            });
            const result = await (0, _settingactions.setCurrencyOnServer)('USD');
            expect(result.success).toBe(false);
            expect(result.message).toBeDefined();
        });
    });
    describe('clearSettingsCache', ()=>{
        it('should clear settings cache successfully', async ()=>{
            const result = await (0, _settingactions.clearSettingsCache)();
            expect(result.success).toBe(true);
            expect(result.message).toBe('Cache cleared successfully');
        });
    });
    describe('getSettingWithOptions', ()=>{
        it('should bypass cache when specified', async ()=>{
            const result = await (0, _settingactions.getSettingWithOptions)({
                bypassCache: true
            });
            expect(result).toBeDefined();
            expect(_db.connectToDatabase).toHaveBeenCalled();
        });
        it('should use cache when not specified', async ()=>{
            const result = await (0, _settingactions.getSettingWithOptions)();
            expect(result).toBeDefined();
            expect(result.site.name).toBe('Test Store');
        });
        it('should handle empty options', async ()=>{
            const result = await (0, _settingactions.getSettingWithOptions)();
            expect(result).toBeDefined();
            expect(result.site.name).toBe('Test Store');
        });
    });
    describe('Error Handling', ()=>{
        it('should handle database connection errors', async ()=>{
            ;
            _db.connectToDatabase.mockRejectedValue(new Error('Connection failed'));
            const result = await (0, _settingactions.getSetting)();
            expect(result.site.name).toBe('Test Store');
        });
        it('should handle malformed database responses', async ()=>{
            ;
            _settingmodel.default.findOne.mockImplementation(()=>({
                    lean: ()=>Promise.resolve({
                            invalid: 'data'
                        })
                }));
            const result = await (0, _settingactions.getSetting)();
            expect(result.site.name).toBe('Test Store');
        });
        it('should handle JSON parsing errors', async ()=>{
            ;
            _settingmodel.default.findOne.mockImplementation(()=>({
                    lean: ()=>Promise.resolve(undefined)
                }));
            const result = await (0, _settingactions.getSetting)();
            expect(result.site.name).toBe('Test Store');
        });
    });
}) // Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-04-21 01:19:05
 // Current User's Login: ibrahim-lasfar
;

//# sourceMappingURL=data:application/json;base64,