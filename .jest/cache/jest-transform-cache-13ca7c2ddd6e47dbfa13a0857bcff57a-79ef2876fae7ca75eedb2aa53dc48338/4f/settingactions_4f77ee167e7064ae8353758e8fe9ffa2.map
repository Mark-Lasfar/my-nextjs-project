{"version":3,"names":["cov_jlekko213","actualCoverage","s","clearSettingsCache","f","getNoCachedSetting","getSetting","getSettingWithOptions","setCurrencyOnServer","updateSetting","globalForSettings","global","cachedSettings","b","DEFAULT_SETTINGS","site","name","slogan","description","url","process","env","NEXT_PUBLIC_APP_URL","email","address","phone","logo","keywords","author","copyright","common","pageSize","isMaintenanceMode","freeShippingMinPrice","defaultTheme","defaultColor","availableLanguages","code","carousels","defaultLanguage","availableCurrencies","symbol","convertRate","defaultCurrency","availablePaymentMethods","commission","defaultPaymentMethod","availableDeliveryDates","daysToDeliver","shippingPrice","defaultDeliveryDate","ensureSettings","settings","_db","connectToDatabase","setting","_settingmodel","default","findOne","lean","JSON","parse","stringify","error","console","_react","cache","settingsToCache","_data","newSetting","updatedSetting","findOneAndUpdate","upsert","new","Error","parsedSetting","success","message","data","_utils","formatError","newCurrency","cookieStore","_headers","cookies","set","path","maxAge","secure","NODE_ENV","sameSite","options","bypassCache"],"sources":["/home/mark/Downloads/nextjs-amazona-main/lib/actions/setting.actions.ts"],"sourcesContent":["'use server'\n\nimport { cache } from 'react'\nimport { ISettingInput } from '@/types'\nimport data from '../data'\nimport Setting from '../db/models/setting.model'\nimport { connectToDatabase } from '../db'\nimport { formatError } from '../utils'\nimport { cookies } from 'next/headers'\n\n// Types\ninterface SettingResponse<T = void> {\n  success: boolean\n  message: string\n  data?: T\n}\n\n// Global cache for settings\ndeclare global {\n  var cachedSettings: ISettingInput | null\n}\n\nconst globalForSettings = global as { cachedSettings: ISettingInput | null }\nglobalForSettings.cachedSettings = globalForSettings.cachedSettings || null\n\n// Default settings\nconst DEFAULT_SETTINGS: ISettingInput = {\n  site: {\n    name: 'MGZon',\n    slogan: 'Your Ultimate Shopping Destination',\n    description: 'Shop online for the best products at great prices',\n    url: process.env.NEXT_PUBLIC_APP_URL || 'https://hager-zon.vercel.app',\n    email: 'support@mgzon.com',\n    address: '123 Main St',\n    phone: '+1234567890',\n    logo: '/logo.png',\n    keywords: 'ecommerce, shopping',\n    author: 'MGZon Team',\n    copyright: 'Â© 2024 MGZon',\n  },\n  common: {\n    pageSize: 9,\n    isMaintenanceMode: false,\n    freeShippingMinPrice: 0,\n    defaultTheme: 'light',\n    defaultColor: 'gold',\n  },\n  availableLanguages: [\n    {\n      name: 'English',\n      code: 'en-US',\n    },\n  ],\n  carousels: [],\n  defaultLanguage: 'en-US',\n  availableCurrencies: [\n    {\n      name: 'US Dollar',\n      code: 'USD',\n      symbol: '$',\n      convertRate: 1,\n    },\n  ],\n  defaultCurrency: 'USD',\n  availablePaymentMethods: [\n    {\n      name: 'Credit Card',\n      commission: 0,\n    },\n  ],\n  defaultPaymentMethod: 'Credit Card',\n  availableDeliveryDates: [\n    {\n      name: 'Standard Shipping',\n      daysToDeliver: 3,\n      shippingPrice: 0,\n      freeShippingMinPrice: 50,\n    },\n  ],\n  defaultDeliveryDate: 'Standard Shipping',\n}\n\n/**\n * Ensures settings are not null and have proper defaults\n */\nfunction ensureSettings(settings: ISettingInput | null): ISettingInput {\n  if (!settings) {\n    return { ...DEFAULT_SETTINGS }\n  }\n  return settings\n}\n\n/**\n * Get settings without cache\n */\nexport async function getNoCachedSetting(): Promise<ISettingInput> {\n  try {\n    await connectToDatabase()\n    const setting = await Setting.findOne().lean()\n    return setting\n      ? JSON.parse(JSON.stringify(setting))\n      : { ...DEFAULT_SETTINGS }\n  } catch (error) {\n    console.error('Error fetching uncached settings:', error)\n    return { ...DEFAULT_SETTINGS }\n  }\n}\n\n/**\n * Get settings with cache (React cache)\n */\nexport const getSetting = cache(async (): Promise<ISettingInput> => {\n  try {\n    if (globalForSettings.cachedSettings) {\n      return ensureSettings(\n        JSON.parse(JSON.stringify(globalForSettings.cachedSettings))\n      )\n    }\n\n    await connectToDatabase()\n    const setting = await Setting.findOne().lean()\n\n    const settingsToCache = setting\n      ? JSON.parse(JSON.stringify(setting))\n      : data.settings[0] || { ...DEFAULT_SETTINGS }\n\n    globalForSettings.cachedSettings = settingsToCache\n\n    return ensureSettings(settingsToCache)\n  } catch (error) {\n    console.error('Error fetching settings:', error)\n    return { ...DEFAULT_SETTINGS }\n  }\n})\n\n/**\n * Update settings\n */\nexport async function updateSetting(\n  newSetting: ISettingInput\n): Promise<SettingResponse<ISettingInput>> {\n  try {\n    await connectToDatabase()\n    const updatedSetting = await Setting.findOneAndUpdate({}, newSetting, {\n      upsert: true,\n      new: true,\n      lean: true,\n    })\n\n    if (!updatedSetting) {\n      throw new Error('Failed to update settings')\n    }\n\n    const parsedSetting = JSON.parse(JSON.stringify(updatedSetting))\n    globalForSettings.cachedSettings = parsedSetting\n\n    return {\n      success: true,\n      message: 'Setting updated successfully',\n      data: parsedSetting,\n    }\n  } catch (error) {\n    console.error('Error updating settings:', error)\n    return {\n      success: false,\n      message: formatError(error),\n    }\n  }\n}\n\n/**\n * Update currency in cookies\n */\nexport async function setCurrencyOnServer(\n  newCurrency: string\n): Promise<SettingResponse> {\n  try {\n    const cookieStore = await cookies()\n    await cookieStore.set('currency', newCurrency, {\n      path: '/',\n      maxAge: 60 * 60 * 24 * 30, // 30 days\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax',\n    })\n\n    return {\n      success: true,\n      message: 'Currency updated successfully',\n    }\n  } catch (error) {\n    console.error('Error setting currency:', error)\n    return {\n      success: false,\n      message: formatError(error),\n    }\n  }\n}\n\n/**\n * Clear settings cache\n */\nexport async function clearSettingsCache(): Promise<SettingResponse> {\n  globalForSettings.cachedSettings = null\n  return { success: true, message: 'Cache cleared successfully' }\n}\n\n/**\n * Get settings with optional cache bypass\n */\nexport async function getSettingWithOptions(\n  options: { bypassCache?: boolean } = {}\n): Promise<ISettingInput> {\n  const settings = options.bypassCache\n    ? await getNoCachedSetting()\n    : await getSetting()\n  return ensureSettings(settings)\n}\n\n// Current Date and Time (UTC): 2025-04-20 18:32:02\n// Current User's Login: ibrahim-lasfar\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}