{"version":3,"sources":["/home/mark/Downloads/nextjs-amazona-main/lib/actions/setting.actions.ts"],"sourcesContent":["'use server'\n\nimport { cache } from 'react'\nimport { ISettingInput } from '@/types'\nimport data from '../data'\nimport Setting from '../db/models/setting.model'\nimport { connectToDatabase } from '../db'\nimport { formatError } from '../utils'\nimport { cookies } from 'next/headers'\n\n// Types\ninterface SettingResponse<T = void> {\n  success: boolean\n  message: string\n  data?: T\n}\n\n// Global cache for settings\ndeclare global {\n  var cachedSettings: ISettingInput | null\n}\n\nconst globalForSettings = global as { cachedSettings: ISettingInput | null }\nglobalForSettings.cachedSettings = globalForSettings.cachedSettings || null\n\n// Default settings\nconst DEFAULT_SETTINGS: ISettingInput = {\n  site: {\n    name: 'MGZon',\n    slogan: 'Your Ultimate Shopping Destination',\n    description: 'Shop online for the best products at great prices',\n    url: process.env.NEXT_PUBLIC_APP_URL || 'https://hager-zon.vercel.app',\n    email: 'support@mgzon.com',\n    address: '123 Main St',\n    phone: '+1234567890',\n    logo: '/logo.png',\n    keywords: 'ecommerce, shopping',\n    author: 'MGZon Team',\n    copyright: 'Â© 2024 MGZon',\n  },\n  common: {\n    pageSize: 9,\n    isMaintenanceMode: false,\n    freeShippingMinPrice: 0,\n    defaultTheme: 'light',\n    defaultColor: 'gold',\n  },\n  availableLanguages: [\n    {\n      name: 'English',\n      code: 'en-US',\n    },\n  ],\n  carousels: [],\n  defaultLanguage: 'en-US',\n  availableCurrencies: [\n    {\n      name: 'US Dollar',\n      code: 'USD',\n      symbol: '$',\n      convertRate: 1,\n    },\n  ],\n  defaultCurrency: 'USD',\n  availablePaymentMethods: [\n    {\n      name: 'Credit Card',\n      commission: 0,\n    },\n  ],\n  defaultPaymentMethod: 'Credit Card',\n  availableDeliveryDates: [\n    {\n      name: 'Standard Shipping',\n      daysToDeliver: 3,\n      shippingPrice: 0,\n      freeShippingMinPrice: 50,\n    },\n  ],\n  defaultDeliveryDate: 'Standard Shipping',\n}\n\n/**\n * Ensures settings are not null and have proper defaults\n */\nfunction ensureSettings(settings: ISettingInput | null): ISettingInput {\n  if (!settings) {\n    return { ...DEFAULT_SETTINGS }\n  }\n  return settings\n}\n\n/**\n * Get settings without cache\n */\nexport async function getNoCachedSetting(): Promise<ISettingInput> {\n  try {\n    await connectToDatabase()\n    const setting = await Setting.findOne().lean()\n    return setting\n      ? JSON.parse(JSON.stringify(setting))\n      : { ...DEFAULT_SETTINGS }\n  } catch (error) {\n    console.error('Error fetching uncached settings:', error)\n    return { ...DEFAULT_SETTINGS }\n  }\n}\n\n/**\n * Get settings with cache (React cache)\n */\nexport const getSetting = cache(async (): Promise<ISettingInput> => {\n  try {\n    if (globalForSettings.cachedSettings) {\n      return ensureSettings(\n        JSON.parse(JSON.stringify(globalForSettings.cachedSettings))\n      )\n    }\n\n    await connectToDatabase()\n    const setting = await Setting.findOne().lean()\n\n    const settingsToCache = setting\n      ? JSON.parse(JSON.stringify(setting))\n      : data.settings[0] || { ...DEFAULT_SETTINGS }\n\n    globalForSettings.cachedSettings = settingsToCache\n\n    return ensureSettings(settingsToCache)\n  } catch (error) {\n    console.error('Error fetching settings:', error)\n    return { ...DEFAULT_SETTINGS }\n  }\n})\n\n/**\n * Update settings\n */\nexport async function updateSetting(\n  newSetting: ISettingInput\n): Promise<SettingResponse<ISettingInput>> {\n  try {\n    await connectToDatabase()\n    const updatedSetting = await Setting.findOneAndUpdate({}, newSetting, {\n      upsert: true,\n      new: true,\n      lean: true,\n    })\n\n    if (!updatedSetting) {\n      throw new Error('Failed to update settings')\n    }\n\n    const parsedSetting = JSON.parse(JSON.stringify(updatedSetting))\n    globalForSettings.cachedSettings = parsedSetting\n\n    return {\n      success: true,\n      message: 'Setting updated successfully',\n      data: parsedSetting,\n    }\n  } catch (error) {\n    console.error('Error updating settings:', error)\n    return {\n      success: false,\n      message: formatError(error),\n    }\n  }\n}\n\n/**\n * Update currency in cookies\n */\nexport async function setCurrencyOnServer(\n  newCurrency: string\n): Promise<SettingResponse> {\n  try {\n    const cookieStore = await cookies()\n    await cookieStore.set('currency', newCurrency, {\n      path: '/',\n      maxAge: 60 * 60 * 24 * 30, // 30 days\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax',\n    })\n\n    return {\n      success: true,\n      message: 'Currency updated successfully',\n    }\n  } catch (error) {\n    console.error('Error setting currency:', error)\n    return {\n      success: false,\n      message: formatError(error),\n    }\n  }\n}\n\n/**\n * Clear settings cache\n */\nexport async function clearSettingsCache(): Promise<SettingResponse> {\n  globalForSettings.cachedSettings = null\n  return { success: true, message: 'Cache cleared successfully' }\n}\n\n/**\n * Get settings with optional cache bypass\n */\nexport async function getSettingWithOptions(\n  options: { bypassCache?: boolean } = {}\n): Promise<ISettingInput> {\n  const settings = options.bypassCache\n    ? await getNoCachedSetting()\n    : await getSetting()\n  return ensureSettings(settings)\n}\n\n// Current Date and Time (UTC): 2025-04-20 18:32:02\n// Current User's Login: ibrahim-lasfar\n"],"names":["clearSettingsCache","getNoCachedSetting","getSetting","getSettingWithOptions","setCurrencyOnServer","updateSetting","globalForSettings","global","cachedSettings","DEFAULT_SETTINGS","site","name","slogan","description","url","process","env","NEXT_PUBLIC_APP_URL","email","address","phone","logo","keywords","author","copyright","common","pageSize","isMaintenanceMode","freeShippingMinPrice","defaultTheme","defaultColor","availableLanguages","code","carousels","defaultLanguage","availableCurrencies","symbol","convertRate","defaultCurrency","availablePaymentMethods","commission","defaultPaymentMethod","availableDeliveryDates","daysToDeliver","shippingPrice","defaultDeliveryDate","ensureSettings","settings","connectToDatabase","setting","Setting","findOne","lean","JSON","parse","stringify","error","console","cache","settingsToCache","data","newSetting","updatedSetting","findOneAndUpdate","upsert","new","Error","parsedSetting","success","message","formatError","newCurrency","cookieStore","cookies","set","path","maxAge","secure","NODE_ENV","sameSite","options","bypassCache"],"mappings":"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"}