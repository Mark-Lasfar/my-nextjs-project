{"version":3,"sources":["/home/mark/Downloads/nextjs-amazona-main/__tests__/lib/actions/setting.actions.test.tsx"],"sourcesContent":["import {\n    getSetting,\n    updateSetting,\n    clearSettingsCache,\n    setCurrencyOnServer,\n    getNoCachedSetting,\n    getSettingWithOptions,\n  } from '@/lib/actions/setting.actions'\n  import { connectToDatabase } from '@/lib/db'\n  import Setting from '@/lib/db/models/setting.model'\n  import { ISettingInput } from '@/types'\n  \n  // Mock the database connection and models\n  jest.mock('@/lib/db', () => ({\n    connectToDatabase: jest.fn(),\n  }))\n  \n  jest.mock('@/lib/db/models/setting.model', () => ({\n    findOne: jest.fn(),\n    findOneAndUpdate: jest.fn(),\n  }))\n  \n  const mockSet = jest.fn()\n  jest.mock('next/headers', () => ({\n    cookies: () => ({\n      set: mockSet,\n    }),\n  }))\n  \n  describe('Setting Actions', () => {\n    const mockSetting: ISettingInput = {\n      site: {\n        name: 'Test Store',\n        slogan: 'Test Slogan',\n        description: 'Test Description',\n        url: 'https://test.com',\n        email: 'test@test.com',\n        address: '123 Test St',\n        phone: '123-456-7890',\n        logo: '/logo.png',\n        keywords: 'test, store',\n        author: 'Test Author',\n        copyright: 'Â© 2024 Test',\n      },\n      common: {\n        pageSize: 9,\n        isMaintenanceMode: false,\n        freeShippingMinPrice: 0,\n        defaultTheme: 'light',\n        defaultColor: 'gold',\n      },\n      availableLanguages: [\n        {\n          name: 'English',\n          code: 'en-US',\n        },\n      ],\n      carousels: [],\n      defaultLanguage: 'en-US',\n      availableCurrencies: [\n        {\n          name: 'US Dollar',\n          code: 'USD',\n          symbol: '$',\n          convertRate: 1,\n        },\n      ],\n      defaultCurrency: 'USD',\n      availablePaymentMethods: [\n        {\n          name: 'Credit Card',\n          commission: 0,\n        },\n      ],\n      defaultPaymentMethod: 'Credit Card',\n      availableDeliveryDates: [\n        {\n          name: 'Standard Shipping',\n          daysToDeliver: 3,\n          shippingPrice: 0,\n          freeShippingMinPrice: 50,\n        },\n      ],\n      defaultDeliveryDate: 'Standard Shipping',\n    }\n  \n    beforeEach(() => {\n      jest.resetModules()\n      jest.clearAllMocks()\n      ;(Setting.findOne as jest.Mock).mockImplementation(() => ({\n        lean: () => Promise.resolve(mockSetting),\n      }))\n      ;(Setting.findOneAndUpdate as jest.Mock).mockResolvedValue(mockSetting)\n      ;(connectToDatabase as jest.Mock).mockResolvedValue(undefined)\n      mockSet.mockClear()\n    })\n  \n    describe('getSetting', () => {\n      it('should get settings from cache if available', async () => {\n        await getSetting()\n        jest.clearAllMocks()\n        const result = await getSetting()\n        expect(result).toBeDefined()\n        expect(result.site.name).toBe('Test Store')\n        expect(connectToDatabase).not.toHaveBeenCalled()\n      })\n  \n      it('should get settings from database if not cached', async () => {\n        await clearSettingsCache()\n        const result = await getSetting()\n        expect(result).toBeDefined()\n        expect(result.site.name).toBe('Test Store')\n        expect(connectToDatabase).toHaveBeenCalled()\n      })\n  \n      it('should return default settings if database query fails', async () => {\n        ;(Setting.findOne as jest.Mock).mockImplementation(() => {\n          throw new Error('Database error')\n        })\n        const result = await getSetting()\n        expect(result).toBeDefined()\n        expect(result.site.name).toBe('Test Store')\n      })\n  \n      it('should handle empty database result', async () => {\n        ;(Setting.findOne as jest.Mock).mockImplementation(() => ({\n          lean: () => Promise.resolve(null),\n        }))\n        const result = await getSetting()\n        expect(result).toBeDefined()\n        expect(result.site.name).toBe('Test Store')\n      })\n    })\n  \n    describe('getNoCachedSetting', () => {\n      it('should get settings directly from database', async () => {\n        const result = await getNoCachedSetting()\n        expect(result).toBeDefined()\n        expect(result.site.name).toBe('Test Store')\n        expect(connectToDatabase).toHaveBeenCalled()\n      })\n  \n      it('should return default settings on error', async () => {\n        ;(Setting.findOne as jest.Mock).mockImplementation(() => {\n          throw new Error('Database error')\n        })\n        const result = await getNoCachedSetting()\n        expect(result).toBeDefined()\n        expect(result.site.name).toBe('Test Store')\n      })\n    })\n  \n    describe('updateSetting', () => {\n      it('should update settings successfully', async () => {\n        const newSettings = {\n          ...mockSetting,\n          site: { ...mockSetting.site, name: 'Updated Store' },\n        }\n        const result = await updateSetting(newSettings)\n        expect(result.success).toBe(true)\n        expect(result.message).toBe('Setting updated successfully')\n        expect(result.data).toBeDefined()\n      })\n  \n      it('should handle database update errors', async () => {\n        ;(Setting.findOneAndUpdate as jest.Mock).mockRejectedValue(\n          new Error('Update failed')\n        )\n        const result = await updateSetting(mockSetting)\n        expect(result.success).toBe(false)\n        expect(result.message).toBeDefined()\n      })\n  \n      it('should handle null update result', async () => {\n        ;(Setting.findOneAndUpdate as jest.Mock).mockResolvedValue(null)\n        const result = await updateSetting(mockSetting)\n        expect(result.success).toBe(false)\n        expect(result.message).toBe('Failed to update settings')\n      })\n    })\n  \n    describe('setCurrencyOnServer', () => {\n      it('should set currency cookie successfully', async () => {\n        const result = await setCurrencyOnServer('USD')\n        expect(result.success).toBe(true)\n        expect(result.message).toBe('Currency updated successfully')\n      })\n  \n      it('should handle cookie setting errors', async () => {\n        mockSet.mockImplementation(() => {\n          throw new Error('Cookie error')\n        })\n        const result = await setCurrencyOnServer('USD')\n        expect(result.success).toBe(false)\n        expect(result.message).toBeDefined()\n      })\n    })\n  \n    describe('clearSettingsCache', () => {\n      it('should clear settings cache successfully', async () => {\n        const result = await clearSettingsCache()\n        expect(result.success).toBe(true)\n        expect(result.message).toBe('Cache cleared successfully')\n      })\n    })\n  \n    describe('getSettingWithOptions', () => {\n      it('should bypass cache when specified', async () => {\n        const result = await getSettingWithOptions({ bypassCache: true })\n        expect(result).toBeDefined()\n        expect(connectToDatabase).toHaveBeenCalled()\n      })\n  \n      it('should use cache when not specified', async () => {\n        const result = await getSettingWithOptions()\n        expect(result).toBeDefined()\n        expect(result.site.name).toBe('Test Store')\n      })\n  \n      it('should handle empty options', async () => {\n        const result = await getSettingWithOptions()\n        expect(result).toBeDefined()\n        expect(result.site.name).toBe('Test Store')\n      })\n    })\n  \n    describe('Error Handling', () => {\n      it('should handle database connection errors', async () => {\n        ;(connectToDatabase as jest.Mock).mockRejectedValue(\n          new Error('Connection failed')\n        )\n        const result = await getSetting()\n        expect(result.site.name).toBe('Test Store')\n      })\n  \n      it('should handle malformed database responses', async () => {\n        ;(Setting.findOne as jest.Mock).mockImplementation(() => ({\n          lean: () => Promise.resolve({ invalid: 'data' }),\n        }))\n        const result = await getSetting()\n        expect(result.site.name).toBe('Test Store')\n      })\n  \n      it('should handle JSON parsing errors', async () => {\n        ;(Setting.findOne as jest.Mock).mockImplementation(() => ({\n          lean: () => Promise.resolve(undefined),\n        }))\n        const result = await getSetting()\n        expect(result.site.name).toBe('Test Store')\n      })\n    })\n  })\n  \n  // Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-04-21 00:50:23\n  // Current User's Login: ibrahim-lasfar"],"names":["jest","mock","connectToDatabase","fn","findOne","findOneAndUpdate","cookies","set","mockSet","describe","mockSetting","site","name","slogan","description","url","email","address","phone","logo","keywords","author","copyright","common","pageSize","isMaintenanceMode","freeShippingMinPrice","defaultTheme","defaultColor","availableLanguages","code","carousels","defaultLanguage","availableCurrencies","symbol","convertRate","defaultCurrency","availablePaymentMethods","commission","defaultPaymentMethod","availableDeliveryDates","daysToDeliver","shippingPrice","defaultDeliveryDate","beforeEach","resetModules","clearAllMocks","Setting","mockImplementation","lean","Promise","resolve","mockResolvedValue","undefined","mockClear","it","getSetting","result","expect","toBeDefined","toBe","not","toHaveBeenCalled","clearSettingsCache","Error","getNoCachedSetting","newSettings","updateSetting","success","message","data","mockRejectedValue","setCurrencyOnServer","getSettingWithOptions","bypassCache","invalid"],"mappings":"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"}