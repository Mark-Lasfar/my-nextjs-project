{"version":3,"sources":["/home/mark/Downloads/nextjs-amazona-main/__tests__/components/settings/currency-form.test.tsx"],"sourcesContent":["import { render, screen, fireEvent } from '@testing-library/react'\nimport CurrencyForm from '@/app/[locale]/admin/settings/currency-form'\nimport { useForm, FormProvider } from 'react-hook-form'\nimport { ISettingInput } from '@/types'\n\n// Mock FormProvider context\njest.mock('react-hook-form', () => ({\n  ...jest.requireActual('react-hook-form'),\n  useFormContext: () => ({\n    getFieldState: () => ({ error: null }),\n    formState: { errors: {} },\n    watch: jest.fn(),\n    control: {},\n    setValue: jest.fn(),\n    register: jest.fn(),\n    getValues: jest.fn(),\n  }),\n  useFieldArray: () => ({\n    fields: [\n      {\n        id: '1',\n        name: 'US Dollar',\n        code: 'USD',\n        symbol: '$',\n        convertRate: 1,\n      },\n    ],\n    append: jest.fn(),\n    remove: jest.fn(),\n  }),\n}))\n\n// Mock form provider wrapper\nconst CurrencyFormWithProvider = ({ defaultValues = {} }) => {\n  const methods = useForm<ISettingInput>({\n    defaultValues: defaultValues || {\n      availableCurrencies: [\n        {\n          name: 'US Dollar',\n          code: 'USD',\n          symbol: '$',\n          convertRate: 1,\n        },\n      ],\n      defaultCurrency: 'USD',\n    },\n  })\n\n  return (\n    <FormProvider {...methods}>\n      <CurrencyForm form={methods} id=\"currency-form\" />\n    </FormProvider>\n  )\n}\n\ndescribe('CurrencyForm', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it('renders currency form fields', () => {\n    const defaultValues = {\n      availableCurrencies: [\n        {\n          name: 'US Dollar',\n          code: 'USD',\n          symbol: '$',\n          convertRate: 1,\n        },\n      ],\n      defaultCurrency: 'USD',\n    }\n\n    render(<CurrencyFormWithProvider defaultValues={defaultValues} />)\n\n    // Check if form fields are rendered\n    expect(screen.getByPlaceholderText('Currency Name')).toBeInTheDocument()\n    expect(screen.getByPlaceholderText('USD')).toBeInTheDocument()\n    expect(screen.getByPlaceholderText('$')).toBeInTheDocument()\n    expect(screen.getByPlaceholderText('1.0000')).toBeInTheDocument()\n  })\n\n  it('allows adding new currency', () => {\n    render(<CurrencyFormWithProvider />)\n    \n    const addButton = screen.getByText('Add New Currency')\n    fireEvent.click(addButton)\n\n    // Check if new fields are added\n    const currencyNameInputs = screen.getAllByPlaceholderText('Currency Name')\n    expect(currencyNameInputs).toHaveLength(2)\n  })\n\n  it('prevents removing last currency', () => {\n    render(<CurrencyFormWithProvider />)\n    \n    const removeButton = screen.getByTitle('Cannot remove last currency')\n    expect(removeButton).toBeDisabled()\n  })\n\n  it('allows selecting default currency', () => {\n    const defaultValues = {\n      availableCurrencies: [\n        {\n          name: 'US Dollar',\n          code: 'USD',\n          symbol: '$',\n          convertRate: 1,\n        },\n      ],\n      defaultCurrency: '',\n    }\n\n    render(<CurrencyFormWithProvider defaultValues={defaultValues} />)\n    \n    const select = screen.getByRole('combobox', { name: /default currency/i })\n    expect(select).toBeInTheDocument()\n  })\n\n  it('shows validation errors for required fields', () => {\n    const methods = useForm<ISettingInput>({\n      defaultValues: {\n        availableCurrencies: [{ name: '', code: '', symbol: '', convertRate: 0 }],\n        defaultCurrency: '',\n      },\n    })\n\n    render(\n      <FormProvider {...methods}>\n        <CurrencyForm form={methods} id=\"currency-form\" />\n      </FormProvider>\n    )\n\n    const submitButton = screen.getByRole('button', { name: /save/i })\n    fireEvent.click(submitButton)\n\n    // Validation errors should be shown\n    expect(screen.getAllByText(/This field is required/i)).toHaveLength(4)\n  })\n})\n\n// Current Date and Time (UTC): 2025-04-20 22:34:39\n// Current User's Login: ibrahim-lasfar"],"names":["jest","mock","requireActual","useFormContext","getFieldState","error","formState","errors","watch","fn","control","setValue","register","getValues","useFieldArray","fields","id","name","code","symbol","convertRate","append","remove","CurrencyFormWithProvider","defaultValues","methods","useForm","availableCurrencies","defaultCurrency","FormProvider","CurrencyForm","form","describe","beforeEach","clearAllMocks","it","render","expect","screen","getByPlaceholderText","toBeInTheDocument","addButton","getByText","fireEvent","click","currencyNameInputs","getAllByPlaceholderText","toHaveLength","removeButton","getByTitle","toBeDisabled","select","getByRole","submitButton","getAllByText"],"mappings":"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"}