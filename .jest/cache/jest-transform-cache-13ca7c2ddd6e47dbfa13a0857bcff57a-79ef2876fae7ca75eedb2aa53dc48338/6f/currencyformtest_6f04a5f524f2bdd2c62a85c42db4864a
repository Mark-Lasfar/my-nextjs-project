2c087b513b8ec831f83a9d86b09e5116
"use strict";
// Mock FormProvider context
jest.mock('react-hook-form', ()=>({
        ...jest.requireActual('react-hook-form'),
        useFormContext: ()=>({
                getFieldState: ()=>({
                        error: null
                    }),
                formState: {
                    errors: {}
                },
                watch: jest.fn(),
                control: {},
                setValue: jest.fn(),
                register: jest.fn(),
                getValues: jest.fn()
            }),
        useFieldArray: ()=>({
                fields: [
                    {
                        id: '1',
                        name: 'US Dollar',
                        code: 'USD',
                        symbol: '$',
                        convertRate: 1
                    }
                ],
                append: jest.fn(),
                remove: jest.fn()
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _currencyform = /*#__PURE__*/ _interop_require_default(require("../../../app/[locale]/admin/settings/currency-form"));
const _reacthookform = require("react-hook-form");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock form provider wrapper
const CurrencyFormWithProvider = ({ defaultValues = {} })=>{
    const methods = (0, _reacthookform.useForm)({
        defaultValues: defaultValues || {
            availableCurrencies: [
                {
                    name: 'US Dollar',
                    code: 'USD',
                    symbol: '$',
                    convertRate: 1
                }
            ],
            defaultCurrency: 'USD'
        }
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reacthookform.FormProvider, {
        ...methods,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_currencyform.default, {
            form: methods,
            id: "currency-form"
        })
    });
};
describe('CurrencyForm', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('renders currency form fields', ()=>{
        const defaultValues = {
            availableCurrencies: [
                {
                    name: 'US Dollar',
                    code: 'USD',
                    symbol: '$',
                    convertRate: 1
                }
            ],
            defaultCurrency: 'USD'
        };
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(CurrencyFormWithProvider, {
            defaultValues: defaultValues
        }));
        // Check if form fields are rendered
        expect(_react.screen.getByPlaceholderText('Currency Name')).toBeInTheDocument();
        expect(_react.screen.getByPlaceholderText('USD')).toBeInTheDocument();
        expect(_react.screen.getByPlaceholderText('$')).toBeInTheDocument();
        expect(_react.screen.getByPlaceholderText('1.0000')).toBeInTheDocument();
    });
    it('allows adding new currency', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(CurrencyFormWithProvider, {}));
        const addButton = _react.screen.getByText('Add New Currency');
        _react.fireEvent.click(addButton);
        // Check if new fields are added
        const currencyNameInputs = _react.screen.getAllByPlaceholderText('Currency Name');
        expect(currencyNameInputs).toHaveLength(2);
    });
    it('prevents removing last currency', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(CurrencyFormWithProvider, {}));
        const removeButton = _react.screen.getByTitle('Cannot remove last currency');
        expect(removeButton).toBeDisabled();
    });
    it('allows selecting default currency', ()=>{
        const defaultValues = {
            availableCurrencies: [
                {
                    name: 'US Dollar',
                    code: 'USD',
                    symbol: '$',
                    convertRate: 1
                }
            ],
            defaultCurrency: ''
        };
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(CurrencyFormWithProvider, {
            defaultValues: defaultValues
        }));
        const select = _react.screen.getByRole('combobox', {
            name: /default currency/i
        });
        expect(select).toBeInTheDocument();
    });
    it('shows validation errors for required fields', ()=>{
        const methods = (0, _reacthookform.useForm)({
            defaultValues: {
                availableCurrencies: [
                    {
                        name: '',
                        code: '',
                        symbol: '',
                        convertRate: 0
                    }
                ],
                defaultCurrency: ''
            }
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reacthookform.FormProvider, {
            ...methods,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_currencyform.default, {
                form: methods,
                id: "currency-form"
            })
        }));
        const submitButton = _react.screen.getByRole('button', {
            name: /save/i
        });
        _react.fireEvent.click(submitButton);
        // Validation errors should be shown
        expect(_react.screen.getAllByText(/This field is required/i)).toHaveLength(4);
    });
}) // Current Date and Time (UTC): 2025-04-20 22:34:39
 // Current User's Login: ibrahim-lasfar
;

//# sourceMappingURL=data:application/json;base64,