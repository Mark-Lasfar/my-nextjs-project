{"version":3,"sources":["/home/mark/Downloads/nextjs-amazona-main/__tests__/lib/actions/setting.actions.test.tsx"],"sourcesContent":["import {\n  getSetting,\n  updateSetting,\n  clearSettingsCache,\n  setCurrencyOnServer,\n  getNoCachedSetting,\n  getSettingWithOptions,\n} from '@/lib/actions/setting.actions'\nimport { connectToDatabase } from '@/lib/db'\nimport Setting from '@/lib/db/models/setting.model'\nimport { ISettingInput } from '@/types'\n\n// Mock database connection and models\njest.mock('@/lib/db', () => ({\n  connectToDatabase: jest.fn(),\n}))\n\njest.mock('@/lib/db/models/setting.model', () => ({\n  findOne: jest.fn(),\n  findOneAndUpdate: jest.fn(),\n}))\n\njest.mock('next/headers', () => ({\n  cookies: jest.fn().mockReturnValue({\n    set: jest.fn().mockResolvedValue(undefined),\n  }),\n}))\n\n// Clear module cache between tests\nbeforeEach(() => {\n  jest.resetModules()\n})\n\ndescribe('Setting Actions', () => {\n  // Mock setting data\n  const mockSetting: ISettingInput = {\n    site: {\n      name: 'Test Store',\n      slogan: 'Test Slogan',\n      description: 'Test Description',\n      url: 'https://test.com',\n      email: 'test@test.com',\n      address: '123 Test St',\n      phone: '123-456-7890',\n      logo: '/logo.png',\n      keywords: 'test, store',\n      author: 'Test Author',\n      copyright: 'Â© 2024 Test',\n    },\n    common: {\n      pageSize: 9,\n      isMaintenanceMode: false,\n      freeShippingMinPrice: 0,\n      defaultTheme: 'light',\n      defaultColor: 'gold',\n    },\n    availableLanguages: [\n      {\n        name: 'English',\n        code: 'en-US',\n      },\n    ],\n    carousels: [],\n    defaultLanguage: 'en-US',\n    availableCurrencies: [\n      {\n        name: 'US Dollar',\n        code: 'USD',\n        symbol: '$',\n        convertRate: 1,\n      },\n    ],\n    defaultCurrency: 'USD',\n    availablePaymentMethods: [\n      {\n        name: 'Credit Card',\n        commission: 0,\n      },\n    ],\n    defaultPaymentMethod: 'Credit Card',\n    availableDeliveryDates: [\n      {\n        name: 'Standard Shipping',\n        daysToDeliver: 3,\n        shippingPrice: 0,\n        freeShippingMinPrice: 50,\n      },\n    ],\n    defaultDeliveryDate: 'Standard Shipping',\n  }\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    ;(Setting.findOne as jest.Mock).mockImplementation(() => ({\n      lean: () => Promise.resolve(mockSetting),\n    }))\n    ;(Setting.findOneAndUpdate as jest.Mock).mockResolvedValue(mockSetting)\n    ;(connectToDatabase as jest.Mock).mockResolvedValue(undefined)\n  })\n\n  describe('getSetting', () => {\n    it('should get settings from cache if available', async () => {\n      // First call to populate cache\n      await getSetting()\n      // Reset mocks\n      jest.clearAllMocks()\n      // Second call should use cache\n      const result = await getSetting()\n      expect(result).toBeDefined()\n      expect(result.site.name).toBe('Test Store')\n      expect(connectToDatabase).not.toHaveBeenCalled()\n    })\n\n    it('should get settings from database if not cached', async () => {\n      await clearSettingsCache()\n      const result = await getSetting()\n      expect(result).toBeDefined()\n      expect(result.site.name).toBe('Test Store')\n      expect(connectToDatabase).toHaveBeenCalled()\n    })\n\n    it('should return default settings if database query fails', async () => {\n      ;(Setting.findOne as jest.Mock).mockImplementation(() => {\n        throw new Error('Database error')\n      })\n      const result = await getSetting()\n      expect(result).toBeDefined()\n      expect(result.site.name).toBe('Test Store')\n    })\n\n    it('should handle empty database result', async () => {\n      ;(Setting.findOne as jest.Mock).mockImplementation(() => ({\n        lean: () => Promise.resolve(null),\n      }))\n      const result = await getSetting()\n      expect(result).toBeDefined()\n      expect(result.site.name).toBe('Test Store')\n    })\n  })\n\n  describe('getNoCachedSetting', () => {\n    it('should get settings directly from database', async () => {\n      const result = await getNoCachedSetting()\n      expect(result).toBeDefined()\n      expect(result.site.name).toBe('Test Store')\n      expect(connectToDatabase).toHaveBeenCalled()\n    })\n\n    it('should return default settings on error', async () => {\n      ;(Setting.findOne as jest.Mock).mockImplementation(() => {\n        throw new Error('Database error')\n      })\n      const result = await getNoCachedSetting()\n      expect(result).toBeDefined()\n      expect(result.site.name).toBe('Test Store')\n    })\n  })\n\n  describe('updateSetting', () => {\n    it('should update settings successfully', async () => {\n      const newSettings = {\n        ...mockSetting,\n        site: { ...mockSetting.site, name: 'Updated Store' },\n      }\n      const result = await updateSetting(newSettings)\n      expect(result.success).toBe(true)\n      expect(result.message).toBe('Setting updated successfully')\n      expect(result.data).toBeDefined()\n    })\n\n    it('should handle database update errors', async () => {\n      ;(Setting.findOneAndUpdate as jest.Mock).mockRejectedValue(\n        new Error('Update failed')\n      )\n      const result = await updateSetting(mockSetting)\n      expect(result.success).toBe(false)\n      expect(result.message).toBeDefined()\n    })\n\n    it('should handle null update result', async () => {\n      ;(Setting.findOneAndUpdate as jest.Mock).mockResolvedValue(null)\n      const result = await updateSetting(mockSetting)\n      expect(result.success).toBe(false)\n      expect(result.message).toBe('Failed to update settings')\n    })\n  })\n\n  describe('setCurrencyOnServer', () => {\n    it('should set currency cookie successfully', async () => {\n      const result = await setCurrencyOnServer('USD')\n      expect(result.success).toBe(true)\n      expect(result.message).toBe('Currency updated successfully')\n    })\n\n    it('should handle cookie setting errors', async () => {\n      const mockCookies = jest.requireMock('next/headers').cookies\n      mockCookies.mockImplementation(() => ({\n        set: () => {\n          throw new Error('Cookie error')\n        },\n      }))\n      const result = await setCurrencyOnServer('USD')\n      expect(result.success).toBe(false)\n      expect(result.message).toBeDefined()\n    })\n  })\n\n  describe('clearSettingsCache', () => {\n    it('should clear settings cache successfully', async () => {\n      const result = await clearSettingsCache()\n      expect(result.success).toBe(true)\n      expect(result.message).toBe('Cache cleared successfully')\n    })\n  })\n\n  describe('getSettingWithOptions', () => {\n    it('should bypass cache when specified', async () => {\n      const result = await getSettingWithOptions({ bypassCache: true })\n      expect(result).toBeDefined()\n      expect(connectToDatabase).toHaveBeenCalled()\n    })\n\n    it('should use cache when not specified', async () => {\n      const result = await getSettingWithOptions()\n      expect(result).toBeDefined()\n      expect(result.site.name).toBe('Test Store')\n    })\n\n    it('should handle empty options', async () => {\n      const result = await getSettingWithOptions()\n      expect(result).toBeDefined()\n      expect(result.site.name).toBe('Test Store')\n    })\n  })\n\n  describe('Error Handling', () => {\n    it('should handle database connection errors', async () => {\n      ;(connectToDatabase as jest.Mock).mockRejectedValue(\n        new Error('Connection failed')\n      )\n      const result = await getSetting()\n      expect(result.site.name).toBe('Test Store')\n    })\n\n    it('should handle malformed database responses', async () => {\n      ;(Setting.findOne as jest.Mock).mockImplementation(() => ({\n        lean: () => Promise.resolve({ invalid: 'data' }),\n      }))\n      const result = await getSetting()\n      expect(result.site.name).toBe('Test Store')\n    })\n\n    it('should handle JSON parsing errors', async () => {\n      ;(Setting.findOne as jest.Mock).mockImplementation(() => ({\n        lean: () => Promise.resolve(undefined),\n      }))\n      const result = await getSetting()\n      expect(result.site.name).toBe('Test Store')\n    })\n  })\n})\n\n// Current Date and Time (UTC): 2025-04-20 22:47:32\n// Current User's Login: ibrahim-lasfar\n"],"names":["jest","mock","connectToDatabase","fn","findOne","findOneAndUpdate","cookies","mockReturnValue","set","mockResolvedValue","undefined","beforeEach","resetModules","describe","mockSetting","site","name","slogan","description","url","email","address","phone","logo","keywords","author","copyright","common","pageSize","isMaintenanceMode","freeShippingMinPrice","defaultTheme","defaultColor","availableLanguages","code","carousels","defaultLanguage","availableCurrencies","symbol","convertRate","defaultCurrency","availablePaymentMethods","commission","defaultPaymentMethod","availableDeliveryDates","daysToDeliver","shippingPrice","defaultDeliveryDate","clearAllMocks","Setting","mockImplementation","lean","Promise","resolve","it","getSetting","result","expect","toBeDefined","toBe","not","toHaveBeenCalled","clearSettingsCache","Error","getNoCachedSetting","newSettings","updateSetting","success","message","data","mockRejectedValue","setCurrencyOnServer","mockCookies","requireMock","getSettingWithOptions","bypassCache","invalid"],"mappings":"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"}