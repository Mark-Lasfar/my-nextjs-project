{"version":3,"names":["cov_6sdb32bsj","actualCoverage","s","GET","f","site","url","_settingactions","getSetting","baseUrl","b","date","Date","sitemapItems","lastModified","sitemap","map","item","toISOString","join","Response","headers","error","console","status"],"sources":["/home/mark/Downloads/nextjs-amazona-main/app/sitemap-index.xml/route.ts"],"sourcesContent":["import { MetadataRoute } from 'next'\nimport { getSetting } from '@/lib/actions/setting.actions'\n\n/**\n * Generate sitemap for the website\n */\nexport async function GET(): Promise<Response> {\n  try {\n    const {\n      site: { url },\n    } = await getSetting()\n    const baseUrl = url || 'https://hager-zon.vercel.app'\n    const date = new Date()\n\n    const sitemapItems = [\n      {\n        url: baseUrl,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/sitemap.xml`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/sitemap-products.xml`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/sitemap-blog.xml`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/sitemap-images.xml`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/search`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/products`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/categories`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/cart`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/checkout`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/account`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/orders`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/wishlist`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/about-us`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/contact-us`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/privacy-policy`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/terms-of-service`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/shipping-policy`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/return-policy`,\n        lastModified: date,\n      },\n      {\n        url: `${baseUrl}/faq`,\n        lastModified: date,\n      },\n    ]\n\n    // Convert to XML format\n    const sitemap = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n      ${sitemapItems\n        .map(\n          (item) => `\n        <url>\n          <loc>${item.url}</loc>\n          <lastmod>${item.lastModified.toISOString()}</lastmod>\n        </url>\n      `\n        )\n        .join('')}\n    </urlset>`\n\n    // Return as XML response\n    return new Response(sitemap, {\n      headers: {\n        'Content-Type': 'application/xml',\n      },\n    })\n  } catch (error) {\n    console.error('Error generating sitemap:', error)\n    return new Response('', { status: 500 })\n  }\n}\n\n// Current Date and Time (UTC): 2025-04-20 18:32:02\n// Current User's Login: ibrahim-lasfar\n"],"mappings":"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","ignoreList":[]}