{"version":3,"sources":["/home/mark/Downloads/nextjs-amazona-main/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nimport qs from 'query-string'\n\nexport function formUrlQuery({\n  params,\n  key,\n  value,\n}: {\n  params: string\n  key: string\n  value: string | null\n}) {\n  const currentUrl = qs.parse(params)\n\n  currentUrl[key] = value\n\n  return qs.stringifyUrl(\n    {\n      url: window.location.pathname,\n      query: currentUrl,\n    },\n    { skipNull: true }\n  )\n}\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport const formatNumberWithDecimal = (num: number): string => {\n  const [int, decimal] = num.toString().split('.')\n  return decimal ? `${int}.${decimal.padEnd(2, '0')}` : int\n}\n// PROMPT: [ChatGTP] create toSlug ts arrow function that convert text to lowercase, remove non-word,\n// non-whitespace, non-hyphen characters, replace whitespace, trim leading hyphens and trim trailing hyphens\n\nexport const toSlug = (text: string): string =>\n  text\n    .toLowerCase()\n    .replace(/[^\\w\\s-]+/g, '')\n    .replace(/\\s+/g, '-')\n    .replace(/^-+|-+$/g, '')\n    .replace(/-+/g, '-')\n\nconst CURRENCY_FORMATTER = new Intl.NumberFormat('en-US', {\n  currency: 'USD',\n  style: 'currency',\n  minimumFractionDigits: 2,\n})\nexport function formatCurrency(amount: number) {\n  return CURRENCY_FORMATTER.format(amount)\n}\n\nconst NUMBER_FORMATTER = new Intl.NumberFormat('en-US')\nexport function formatNumber(number: number) {\n  return NUMBER_FORMATTER.format(number)\n}\n\nexport const round2 = (num: number) =>\n  Math.round((num + Number.EPSILON) * 100) / 100\n\nexport const generateId = () =>\n  Array.from({ length: 24 }, () => Math.floor(Math.random() * 10)).join('')\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const formatError = (error: any): string => {\n  if (error.name === 'ZodError') {\n    const fieldErrors = Object.keys(error.errors).map((field) => {\n      const errorMessage = error.errors[field].message\n      return `${error.errors[field].path}: ${errorMessage}` // field: errorMessage\n    })\n    return fieldErrors.join('. ')\n  } else if (error.name === 'ValidationError') {\n    const fieldErrors = Object.keys(error.errors).map((field) => {\n      const errorMessage = error.errors[field].message\n      return errorMessage\n    })\n    return fieldErrors.join('. ')\n  } else if (error.code === 11000) {\n    const duplicateField = Object.keys(error.keyValue)[0]\n    return `${duplicateField} already exists`\n  } else {\n    // return 'Something went wrong. please try again'\n    return typeof error.message === 'string'\n      ? error.message\n      : JSON.stringify(error.message)\n  }\n}\n\nexport function calculateFutureDate(days: number) {\n  const currentDate = new Date()\n  currentDate.setDate(currentDate.getDate() + days)\n  return currentDate\n}\nexport function getMonthName(yearMonth: string): string {\n  const [year, month] = yearMonth.split('-').map(Number)\n  const date = new Date(year, month - 1)\n  const monthName = date.toLocaleString('default', { month: 'long' })\n  const now = new Date()\n\n  if (year === now.getFullYear() && month === now.getMonth() + 1) {\n    return `${monthName} Ongoing`\n  }\n  return monthName\n}\nexport function calculatePastDate(days: number) {\n  const currentDate = new Date()\n  currentDate.setDate(currentDate.getDate() - days)\n  return currentDate\n}\nexport function timeUntilMidnight(): { hours: number; minutes: number } {\n  const now = new Date()\n  const midnight = new Date()\n  midnight.setHours(24, 0, 0, 0) // Set to 12:00 AM (next day)\n\n  const diff = midnight.getTime() - now.getTime() // Difference in milliseconds\n  const hours = Math.floor(diff / (1000 * 60 * 60))\n  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))\n\n  return { hours, minutes }\n}\n\nexport const formatDateTime = (dateString: Date) => {\n  const dateTimeOptions: Intl.DateTimeFormatOptions = {\n    month: 'short', // abbreviated month name (e.g., 'Oct')\n    year: 'numeric', // abbreviated month name (e.g., 'Oct')\n    day: 'numeric', // numeric day of the month (e.g., '25')\n    hour: 'numeric', // numeric hour (e.g., '8')\n    minute: 'numeric', // numeric minute (e.g., '30')\n    hour12: true, // use 12-hour clock (true) or 24-hour clock (false)\n  }\n  const dateOptions: Intl.DateTimeFormatOptions = {\n    // weekday: 'short', // abbreviated weekday name (e.g., 'Mon')\n    month: 'short', // abbreviated month name (e.g., 'Oct')\n    year: 'numeric', // numeric year (e.g., '2023')\n    day: 'numeric', // numeric day of the month (e.g., '25')\n  }\n  const timeOptions: Intl.DateTimeFormatOptions = {\n    hour: 'numeric', // numeric hour (e.g., '8')\n    minute: 'numeric', // numeric minute (e.g., '30')\n    hour12: true, // use 12-hour clock (true) or 24-hour clock (false)\n  }\n  const formattedDateTime: string = new Date(dateString).toLocaleString(\n    'en-US',\n    dateTimeOptions\n  )\n  const formattedDate: string = new Date(dateString).toLocaleString(\n    'en-US',\n    dateOptions\n  )\n  const formattedTime: string = new Date(dateString).toLocaleString(\n    'en-US',\n    timeOptions\n  )\n  return {\n    dateTime: formattedDateTime,\n    dateOnly: formattedDate,\n    timeOnly: formattedTime,\n  }\n}\n\nexport function formatId(id: string) {\n  return `..${id.substring(id.length - 6)}`\n}\n\nexport const getFilterUrl = ({\n  params,\n  category,\n  tag,\n  sort,\n  price,\n  rating,\n  page,\n}: {\n  params: {\n    q?: string\n    category?: string\n    tag?: string\n    price?: string\n    rating?: string\n    sort?: string\n    page?: string\n  }\n  tag?: string\n  category?: string\n  sort?: string\n  price?: string\n  rating?: string\n  page?: string\n}) => {\n  const newParams = { ...params }\n  if (category) newParams.category = category\n  if (tag) newParams.tag = toSlug(tag)\n  if (price) newParams.price = price\n  if (rating) newParams.rating = rating\n  if (page) newParams.page = page\n  if (sort) newParams.sort = sort\n  return `/search?${new URLSearchParams(newParams).toString()}`\n}\n"],"names":["calculateFutureDate","calculatePastDate","cn","formUrlQuery","formatCurrency","formatDateTime","formatError","formatId","formatNumber","formatNumberWithDecimal","generateId","getFilterUrl","getMonthName","round2","timeUntilMidnight","toSlug","params","key","value","currentUrl","qs","parse","stringifyUrl","url","window","location","pathname","query","skipNull","inputs","twMerge","clsx","num","int","decimal","toString","split","padEnd","text","toLowerCase","replace","CURRENCY_FORMATTER","Intl","NumberFormat","currency","style","minimumFractionDigits","amount","format","NUMBER_FORMATTER","number","Math","round","Number","EPSILON","Array","from","length","floor","random","join","error","name","fieldErrors","Object","keys","errors","map","field","errorMessage","message","path","code","duplicateField","keyValue","JSON","stringify","days","currentDate","Date","setDate","getDate","yearMonth","year","month","date","monthName","toLocaleString","now","getFullYear","getMonth","midnight","setHours","diff","getTime","hours","minutes","dateString","dateTimeOptions","day","hour","minute","hour12","dateOptions","timeOptions","formattedDateTime","formattedDate","formattedTime","dateTime","dateOnly","timeOnly","id","substring","category","tag","sort","price","rating","page","newParams","URLSearchParams"],"mappings":"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"}