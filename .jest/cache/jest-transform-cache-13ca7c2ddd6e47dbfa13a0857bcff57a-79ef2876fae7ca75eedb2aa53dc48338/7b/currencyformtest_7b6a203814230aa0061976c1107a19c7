3cf1080c5b8b63a2246a49aaac4b3985
"use strict";
// Mock form context and hooks
jest.mock('react-hook-form', ()=>({
        ...jest.requireActual('react-hook-form'),
        useFormContext: ()=>({
                getFieldState: jest.fn(()=>({
                        error: null
                    })),
                formState: {
                    errors: {}
                },
                watch: jest.fn(),
                setValue: jest.fn(),
                register: jest.fn(),
                getValues: jest.fn(()=>({
                        availableCurrencies: [
                            {
                                name: 'US Dollar',
                                code: 'USD',
                                symbol: '$',
                                convertRate: 1
                            }
                        ],
                        defaultCurrency: 'USD'
                    })),
                control: {}
            }),
        useForm: ()=>({
                control: {},
                register: jest.fn(),
                handleSubmit: jest.fn(),
                formState: {
                    errors: {}
                },
                watch: jest.fn(()=>'USD'),
                setValue: jest.fn(),
                getValues: jest.fn(()=>({
                        availableCurrencies: [
                            {
                                name: 'US Dollar',
                                code: 'USD',
                                symbol: '$',
                                convertRate: 1
                            }
                        ],
                        defaultCurrency: 'USD'
                    }))
            }),
        useFieldArray: ()=>({
                fields: [
                    {
                        id: '1',
                        name: 'US Dollar',
                        code: 'USD',
                        symbol: '$',
                        convertRate: 1
                    }
                ],
                append: jest.fn(),
                remove: jest.fn()
            })
    }));
// Mock useState
jest.mock('react', ()=>({
        ...jest.requireActual('react'),
        useState: jest.fn((init)=>[
                init,
                jest.fn()
            ])
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _currencyform = /*#__PURE__*/ _interop_require_default(require("../../../app/[locale]/admin/settings/currency-form"));
const _reacthookform = require("react-hook-form");
const _react1 = require("react");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Test component wrapper
const TestComponent = ({ defaultValues = {} })=>{
    const form = (0, _reacthookform.useForm)({
        defaultValues: defaultValues || {
            availableCurrencies: [
                {
                    name: 'US Dollar',
                    code: 'USD',
                    symbol: '$',
                    convertRate: 1
                }
            ],
            defaultCurrency: 'USD'
        }
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reacthookform.FormProvider, {
        ...form,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_currencyform.default, {
            form: form,
            id: "currency-form"
        })
    });
};
describe('CurrencyForm', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        _react1.useState.mockImplementation((init)=>[
                init,
                jest.fn()
            ]);
    });
    it('renders currency form fields', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        // Check if form fields are rendered
        expect(_react.screen.getByLabelText(/Currency Name/i)).toBeInTheDocument();
        expect(_react.screen.getByLabelText(/Currency Code/i)).toBeInTheDocument();
        expect(_react.screen.getByLabelText(/Currency Symbol/i)).toBeInTheDocument();
        expect(_react.screen.getByLabelText(/Conversion Rate/i)).toBeInTheDocument();
    });
    it('allows adding new currency', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const addButton = _react.screen.getByText('Add New Currency');
        _react.fireEvent.click(addButton);
        // Verify add currency button was clicked
        const fields = _react.screen.getAllByLabelText(/Currency Name/i);
        expect(fields).toHaveLength(1);
    });
    it('prevents removing last currency', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const removeButton = _react.screen.getByTitle('Cannot remove last currency');
        expect(removeButton).toBeDisabled();
    });
    it('allows selecting default currency', ()=>{
        const defaultValues = {
            availableCurrencies: [
                {
                    name: 'US Dollar',
                    code: 'USD',
                    symbol: '$',
                    convertRate: 1
                }
            ],
            defaultCurrency: ''
        };
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {
            defaultValues: defaultValues
        }));
        const select = _react.screen.getByRole('combobox', {
            name: /Default Currency/i
        });
        expect(select).toBeInTheDocument();
    });
    it('displays currency settings header', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        expect(_react.screen.getByText('Currency Settings')).toBeInTheDocument();
    });
    it('has correct currency code input constraints', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const codeInput = _react.screen.getByLabelText(/Currency Code/i);
        expect(codeInput).toHaveAttribute('maxLength', '3');
    });
    it('has correct conversion rate input constraints', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const rateInput = _react.screen.getByLabelText(/Conversion Rate/i);
        expect(rateInput).toHaveAttribute('type', 'number');
        expect(rateInput).toHaveAttribute('min', '0');
        expect(rateInput).toHaveAttribute('step', '0.0001');
    });
}) // Current Date and Time (UTC): 2025-04-20 22:47:32
 // Current User's Login: ibrahim-lasfar
;

//# sourceMappingURL=data:application/json;base64,