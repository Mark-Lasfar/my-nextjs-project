{"version":3,"names":["cov_sadl33j27","actualCoverage","s","SignInWithGoogle","f","SignOut","deleteUser","getAllUsers","getUserById","registerUser","signInWithCredentials","updateUser","updateUserName","userSignUp","user","_validator","UserSignUpSchema","parseAsync","name","email","password","confirmPassword","_db","connectToDatabase","_usermodel","default","create","_bcryptjs","hash","success","message","error","_utils","formatError","id","res","findByIdAndDelete","b","Error","_cache","revalidatePath","dbUser","findById","_id","role","updatedUser","save","data","JSON","parse","stringify","session","_auth","auth","currentUser","signIn","redirect","redirectTo","signOut","_navigation","limit","page","common","pageSize","_settingactions","getSetting","skipAmount","Number","users","find","sort","createdAt","skip","usersCount","countDocuments","totalPages","Math","ceil","userId"],"sources":["/home/mark/Downloads/nextjs-amazona-main/lib/actions/user.actions.ts"],"sourcesContent":["'use server'\n\nimport bcrypt from 'bcryptjs'\nimport { auth, signIn, signOut } from '@/auth'\nimport { IUserName, IUserSignIn, IUserSignUp } from '@/types'\nimport { UserSignUpSchema, UserUpdateSchema } from '../validator'\nimport { connectToDatabase } from '../db'\nimport User, { IUser } from '../db/models/user.model'\nimport { formatError } from '../utils'\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\nimport { z } from 'zod'\nimport { getSetting } from './setting.actions'\n\n// CREATE\nexport async function registerUser(userSignUp: IUserSignUp) {\n  try {\n    const user = await UserSignUpSchema.parseAsync({\n      name: userSignUp.name,\n      email: userSignUp.email,\n      password: userSignUp.password,\n      confirmPassword: userSignUp.confirmPassword,\n    })\n\n    await connectToDatabase()\n    await User.create({\n      ...user,\n      password: await bcrypt.hash(user.password, 5),\n    })\n    return { success: true, message: 'User created successfully' }\n  } catch (error) {\n    return { success: false, error: formatError(error) }\n  }\n}\n\n// DELETE\n\nexport async function deleteUser(id: string) {\n  try {\n    await connectToDatabase()\n    const res = await User.findByIdAndDelete(id)\n    if (!res) throw new Error('Use not found')\n    revalidatePath('/admin/users')\n    return {\n      success: true,\n      message: 'User deleted successfully',\n    }\n  } catch (error) {\n    return { success: false, message: formatError(error) }\n  }\n}\n// UPDATE\n\nexport async function updateUser(user: z.infer<typeof UserUpdateSchema>) {\n  try {\n    await connectToDatabase()\n    const dbUser = await User.findById(user._id)\n    if (!dbUser) throw new Error('User not found')\n    dbUser.name = user.name\n    dbUser.email = user.email\n    dbUser.role = user.role\n    const updatedUser = await dbUser.save()\n    revalidatePath('/admin/users')\n    return {\n      success: true,\n      message: 'User updated successfully',\n      data: JSON.parse(JSON.stringify(updatedUser)),\n    }\n  } catch (error) {\n    return { success: false, message: formatError(error) }\n  }\n}\nexport async function updateUserName(user: IUserName) {\n  try {\n    await connectToDatabase()\n    const session = await auth()\n    const currentUser = await User.findById(session?.user?.id)\n    if (!currentUser) throw new Error('User not found')\n    currentUser.name = user.name\n    const updatedUser = await currentUser.save()\n    return {\n      success: true,\n      message: 'User updated successfully',\n      data: JSON.parse(JSON.stringify(updatedUser)),\n    }\n  } catch (error) {\n    return { success: false, message: formatError(error) }\n  }\n}\n\nexport async function signInWithCredentials(user: IUserSignIn) {\n  return await signIn('credentials', { ...user, redirect: false })\n}\nexport const SignInWithGoogle = async () => {\n  await signIn('google')\n}\nexport const SignOut = async () => {\n  const redirectTo = await signOut({ redirect: false })\n  redirect(redirectTo.redirect)\n}\n\n// GET\nexport async function getAllUsers({\n  limit,\n  page,\n}: {\n  limit?: number\n  page: number\n}) {\n  const {\n    common: { pageSize },\n  } = await getSetting()\n  limit = limit || pageSize\n  await connectToDatabase()\n\n  const skipAmount = (Number(page) - 1) * limit\n  const users = await User.find()\n    .sort({ createdAt: 'desc' })\n    .skip(skipAmount)\n    .limit(limit)\n  const usersCount = await User.countDocuments()\n  return {\n    data: JSON.parse(JSON.stringify(users)) as IUser[],\n    totalPages: Math.ceil(usersCount / limit),\n  }\n}\n\nexport async function getUserById(userId: string) {\n  await connectToDatabase()\n  const user = await User.findById(userId)\n  if (!user) throw new Error('User not found')\n  return JSON.parse(JSON.stringify(user)) as IUser\n}\n"],"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","ignoreList":[]}