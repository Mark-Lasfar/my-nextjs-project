8d2c9c01742f33c5babfa40c94bc7e4e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    calculateFutureDate: function() {
        return calculateFutureDate;
    },
    calculatePastDate: function() {
        return calculatePastDate;
    },
    cn: function() {
        return cn;
    },
    formUrlQuery: function() {
        return formUrlQuery;
    },
    formatCurrency: function() {
        return formatCurrency;
    },
    formatDateTime: function() {
        return formatDateTime;
    },
    formatError: function() {
        return formatError;
    },
    formatId: function() {
        return formatId;
    },
    formatNumber: function() {
        return formatNumber;
    },
    formatNumberWithDecimal: function() {
        return formatNumberWithDecimal;
    },
    generateId: function() {
        return generateId;
    },
    getFilterUrl: function() {
        return getFilterUrl;
    },
    getMonthName: function() {
        return getMonthName;
    },
    round2: function() {
        return round2;
    },
    timeUntilMidnight: function() {
        return timeUntilMidnight;
    },
    toSlug: function() {
        return toSlug;
    }
});
const _clsx = require("clsx");
const _tailwindmerge = require("tailwind-merge");
const _querystring = /*#__PURE__*/ _interop_require_default(require("query-string"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function formUrlQuery({ params, key, value }) {
    const currentUrl = _querystring.default.parse(params);
    currentUrl[key] = value;
    return _querystring.default.stringifyUrl({
        url: window.location.pathname,
        query: currentUrl
    }, {
        skipNull: true
    });
}
function cn(...inputs) {
    return (0, _tailwindmerge.twMerge)((0, _clsx.clsx)(inputs));
}
const formatNumberWithDecimal = (num)=>{
    const [int, decimal] = num.toString().split('.');
    return decimal ? `${int}.${decimal.padEnd(2, '0')}` : int;
};
const toSlug = (text)=>text.toLowerCase().replace(/[^\w\s-]+/g, '').replace(/\s+/g, '-').replace(/^-+|-+$/g, '').replace(/-+/g, '-');
const CURRENCY_FORMATTER = new Intl.NumberFormat('en-US', {
    currency: 'USD',
    style: 'currency',
    minimumFractionDigits: 2
});
function formatCurrency(amount) {
    return CURRENCY_FORMATTER.format(amount);
}
const NUMBER_FORMATTER = new Intl.NumberFormat('en-US');
function formatNumber(number) {
    return NUMBER_FORMATTER.format(number);
}
const round2 = (num)=>Math.round((num + Number.EPSILON) * 100) / 100;
const generateId = ()=>Array.from({
        length: 24
    }, ()=>Math.floor(Math.random() * 10)).join('');
const formatError = (error)=>{
    if (error.name === 'ZodError') {
        const fieldErrors = Object.keys(error.errors).map((field)=>{
            const errorMessage = error.errors[field].message;
            return `${error.errors[field].path}: ${errorMessage}` // field: errorMessage
            ;
        });
        return fieldErrors.join('. ');
    } else if (error.name === 'ValidationError') {
        const fieldErrors = Object.keys(error.errors).map((field)=>{
            const errorMessage = error.errors[field].message;
            return errorMessage;
        });
        return fieldErrors.join('. ');
    } else if (error.code === 11000) {
        const duplicateField = Object.keys(error.keyValue)[0];
        return `${duplicateField} already exists`;
    } else {
        // return 'Something went wrong. please try again'
        return typeof error.message === 'string' ? error.message : JSON.stringify(error.message);
    }
};
function calculateFutureDate(days) {
    const currentDate = new Date();
    currentDate.setDate(currentDate.getDate() + days);
    return currentDate;
}
function getMonthName(yearMonth) {
    const [year, month] = yearMonth.split('-').map(Number);
    const date = new Date(year, month - 1);
    const monthName = date.toLocaleString('default', {
        month: 'long'
    });
    const now = new Date();
    if (year === now.getFullYear() && month === now.getMonth() + 1) {
        return `${monthName} Ongoing`;
    }
    return monthName;
}
function calculatePastDate(days) {
    const currentDate = new Date();
    currentDate.setDate(currentDate.getDate() - days);
    return currentDate;
}
function timeUntilMidnight() {
    const now = new Date();
    const midnight = new Date();
    midnight.setHours(24, 0, 0, 0) // Set to 12:00 AM (next day)
    ;
    const diff = midnight.getTime() - now.getTime() // Difference in milliseconds
    ;
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));
    return {
        hours,
        minutes
    };
}
const formatDateTime = (dateString)=>{
    const dateTimeOptions = {
        month: 'short',
        year: 'numeric',
        day: 'numeric',
        hour: 'numeric',
        minute: 'numeric',
        hour12: true
    };
    const dateOptions = {
        // weekday: 'short', // abbreviated weekday name (e.g., 'Mon')
        month: 'short',
        year: 'numeric',
        day: 'numeric'
    };
    const timeOptions = {
        hour: 'numeric',
        minute: 'numeric',
        hour12: true
    };
    const formattedDateTime = new Date(dateString).toLocaleString('en-US', dateTimeOptions);
    const formattedDate = new Date(dateString).toLocaleString('en-US', dateOptions);
    const formattedTime = new Date(dateString).toLocaleString('en-US', timeOptions);
    return {
        dateTime: formattedDateTime,
        dateOnly: formattedDate,
        timeOnly: formattedTime
    };
};
function formatId(id) {
    return `..${id.substring(id.length - 6)}`;
}
const getFilterUrl = ({ params, category, tag, sort, price, rating, page })=>{
    const newParams = {
        ...params
    };
    if (category) newParams.category = category;
    if (tag) newParams.tag = toSlug(tag);
    if (price) newParams.price = price;
    if (rating) newParams.rating = rating;
    if (page) newParams.page = page;
    if (sort) newParams.sort = sort;
    return `/search?${new URLSearchParams(newParams).toString()}`;
};

//# sourceMappingURL=data:application/json;base64,