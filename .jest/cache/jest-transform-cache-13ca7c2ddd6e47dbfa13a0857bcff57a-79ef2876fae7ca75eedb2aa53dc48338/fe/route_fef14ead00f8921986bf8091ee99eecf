25ffe0006fcbdfbd0d0a25dfe6499f33
"use strict";

/* istanbul ignore next */
function cov_xgsxswaur() {
  var path = "/home/mark/Downloads/nextjs-amazona-main/app/sitemap-images.xml/route.ts";
  var hash = "bd6c08a0bf7287d60703b11a38022c0798349634";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/mark/Downloads/nextjs-amazona-main/app/sitemap-images.xml/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 24
        },
        end: {
          line: 12,
          column: 68
        }
      },
      "5": {
        start: {
          line: 13,
          column: 26
        },
        end: {
          line: 13,
          column: 65
        }
      },
      "6": {
        start: {
          line: 14,
          column: 28
        },
        end: {
          line: 14,
          column: 69
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 18,
          column: 6
        }
      },
      "8": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 59,
          column: 5
        }
      },
      "9": {
        start: {
          line: 22,
          column: 34
        },
        end: {
          line: 22,
          column: 73
        }
      },
      "10": {
        start: {
          line: 24,
          column: 24
        },
        end: {
          line: 24,
          column: 136
        }
      },
      "11": {
        start: {
          line: 25,
          column: 23
        },
        end: {
          line: 25,
          column: 47
        }
      },
      "12": {
        start: {
          line: 26,
          column: 26
        },
        end: {
          line: 26,
          column: 79
        }
      },
      "13": {
        start: {
          line: 27,
          column: 25
        },
        end: {
          line: 27,
          column: 77
        }
      },
      "14": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 56
        }
      },
      "15": {
        start: {
          line: 29,
          column: 46
        },
        end: {
          line: 29,
          column: 56
        }
      },
      "16": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 33,
          column: 20
        }
      },
      "17": {
        start: {
          line: 30,
          column: 60
        },
        end: {
          line: 30,
          column: 112
        }
      },
      "18": {
        start: {
          line: 30,
          column: 124
        },
        end: {
          line: 33,
          column: 17
        }
      },
      "19": {
        start: {
          line: 35,
          column: 23
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "20": {
        start: {
          line: 39,
          column: 20
        },
        end: {
          line: 48,
          column: 10
        }
      },
      "21": {
        start: {
          line: 41,
          column: 22
        },
        end: {
          line: 47,
          column: 11
        }
      },
      "22": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 53,
          column: 11
        }
      },
      "23": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 65
        }
      },
      "24": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 58,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 33
          }
        },
        loc: {
          start: {
            line: 15,
            column: 39
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 15
      },
      "2": {
        name: "GET",
        decl: {
          start: {
            line: 20,
            column: 15
          },
          end: {
            line: 20,
            column: 18
          }
        },
        loc: {
          start: {
            line: 20,
            column: 21
          },
          end: {
            line: 60,
            column: 1
          }
        },
        line: 20
      },
      "3": {
        name: "getImagesFromDir",
        decl: {
          start: {
            line: 28,
            column: 17
          },
          end: {
            line: 28,
            column: 33
          }
        },
        loc: {
          start: {
            line: 28,
            column: 50
          },
          end: {
            line: 34,
            column: 9
          }
        },
        line: 28
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 30,
            column: 55
          },
          end: {
            line: 30,
            column: 56
          }
        },
        loc: {
          start: {
            line: 30,
            column: 60
          },
          end: {
            line: 30,
            column: 112
          }
        },
        line: 30
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 30,
            column: 118
          },
          end: {
            line: 30,
            column: 119
          }
        },
        loc: {
          start: {
            line: 30,
            column: 124
          },
          end: {
            line: 33,
            column: 17
          }
        },
        line: 30
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 41,
            column: 15
          },
          end: {
            line: 41,
            column: 16
          }
        },
        loc: {
          start: {
            line: 41,
            column: 22
          },
          end: {
            line: 47,
            column: 11
          }
        },
        line: 41
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 18,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 16,
            column: 35
          },
          end: {
            line: 16,
            column: 38
          }
        }, {
          start: {
            line: 16,
            column: 41
          },
          end: {
            line: 18,
            column: 5
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 16,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 16,
            column: 14
          }
        }, {
          start: {
            line: 16,
            column: 18
          },
          end: {
            line: 16,
            column: 32
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 24,
            column: 136
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 80
          },
          end: {
            line: 24,
            column: 103
          }
        }, {
          start: {
            line: 24,
            column: 106
          },
          end: {
            line: 24,
            column: 136
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 24,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 24,
            column: 27
          }
        }, {
          start: {
            line: 24,
            column: 31
          },
          end: {
            line: 24,
            column: 77
          }
        }],
        line: 24
      },
      "4": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 56
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 56
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/mark/Downloads/nextjs-amazona-main/app/sitemap-images.xml/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server'\nimport { getSetting } from '@/lib/actions/setting.actions'\nimport fs from 'fs'\nimport path from 'path'\n\nexport async function GET() {\n  try {\n    const { site: { url } } = await getSetting()\n    // Only allow the official domain, fallback to the correct one\n    const baseUrl = (url && url.startsWith('https://hager-zon.vercel.app'))\n      ? url.replace(/\\/+$/, '')\n      : 'https://hager-zon.vercel.app'\n    const nowIso = new Date().toISOString()\n\n    const imagesDir = path.join(process.cwd(), 'public', 'images')\n    const mediaDir = path.join(process.cwd(), 'public', 'media')\n\n    function getImagesFromDir(dir: string, urlPrefix: string): { loc: string; updatedAt: string }[] {\n      if (!fs.existsSync(dir)) return []\n      return fs\n        .readdirSync(dir)\n        .filter((f) =>\n          /\\.(jpe?g|png|gif|webp|svg|bmp|ico|tiff?)$/i.test(f)\n        )\n        .map((f) => ({\n          loc: `${baseUrl}/${urlPrefix}/${f}`,\n          updatedAt: nowIso, \n        }))\n    }\n\n    const images = [\n      ...getImagesFromDir(imagesDir, 'images'),\n      ...getImagesFromDir(mediaDir, 'media'),\n    ]\n\n    const xml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  ${images\n    .map(\n      (img) => `\n    <url>\n      <loc>${img.loc}</loc>\n      <lastmod>${img.updatedAt}</lastmod>\n      <changefreq>monthly</changefreq>\n      <priority>0.6</priority>\n    </url>`\n    )\n    .join('\\n')}\n</urlset>`\n\n    return new NextResponse(xml, {\n      headers: {\n        'Content-Type': 'application/xml'\n      }\n    })\n  } catch (error) {\n    console.error('Error generating images sitemap:', error)\n    return new NextResponse('Error generating sitemap', { status: 500 })\n  }\n}   "],
      names: ["GET", "site", "url", "getSetting", "baseUrl", "startsWith", "replace", "nowIso", "Date", "toISOString", "imagesDir", "path", "join", "process", "cwd", "mediaDir", "getImagesFromDir", "dir", "urlPrefix", "fs", "existsSync", "readdirSync", "filter", "f", "test", "map", "loc", "updatedAt", "images", "xml", "img", "NextResponse", "headers", "error", "console", "status"],
      mappings: ";;;;+BAKsBA;;;eAAAA;;;wBALO;gCACF;2DACZ;6DACE;;;;;;AAEV,eAAeA;IACpB,IAAI;QACF,MAAM,EAAEC,MAAM,EAAEC,GAAG,EAAE,EAAE,GAAG,MAAMC,IAAAA,0BAAU;QAC1C,8DAA8D;QAC9D,MAAMC,UAAU,AAACF,OAAOA,IAAIG,UAAU,CAAC,kCACnCH,IAAII,OAAO,CAAC,QAAQ,MACpB;QACJ,MAAMC,SAAS,IAAIC,OAAOC,WAAW;QAErC,MAAMC,YAAYC,aAAI,CAACC,IAAI,CAACC,QAAQC,GAAG,IAAI,UAAU;QACrD,MAAMC,WAAWJ,aAAI,CAACC,IAAI,CAACC,QAAQC,GAAG,IAAI,UAAU;QAEpD,SAASE,iBAAiBC,GAAW,EAAEC,SAAiB;YACtD,IAAI,CAACC,WAAE,CAACC,UAAU,CAACH,MAAM,OAAO,EAAE;YAClC,OAAOE,WAAE,CACNE,WAAW,CAACJ,KACZK,MAAM,CAAC,CAACC,IACP,6CAA6CC,IAAI,CAACD,IAEnDE,GAAG,CAAC,CAACF,IAAO,CAAA;oBACXG,KAAK,GAAGtB,QAAQ,CAAC,EAAEc,UAAU,CAAC,EAAEK,GAAG;oBACnCI,WAAWpB;gBACb,CAAA;QACJ;QAEA,MAAMqB,SAAS;eACVZ,iBAAiBN,WAAW;eAC5BM,iBAAiBD,UAAU;SAC/B;QAED,MAAMc,MAAM,CAAC;;EAEf,EAAED,OACCH,GAAG,CACF,CAACK,MAAQ,CAAC;;WAEL,EAAEA,IAAIJ,GAAG,CAAC;eACN,EAAEI,IAAIH,SAAS,CAAC;;;UAGrB,CAAC,EAENf,IAAI,CAAC,MAAM;SACP,CAAC;QAEN,OAAO,IAAImB,oBAAY,CAACF,KAAK;YAC3BG,SAAS;gBACP,gBAAgB;YAClB;QACF;IACF,EAAE,OAAOC,OAAO;QACdC,QAAQD,KAAK,CAAC,oCAAoCA;QAClD,OAAO,IAAIF,oBAAY,CAAC,4BAA4B;YAAEI,QAAQ;QAAI;IACpE;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bd6c08a0bf7287d60703b11a38022c0798349634"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_xgsxswaur = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_xgsxswaur();
cov_xgsxswaur().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_xgsxswaur().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_xgsxswaur().f[0]++;
    cov_xgsxswaur().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_xgsxswaur().s[3]++, require("next/server"));
const _settingactions =
/* istanbul ignore next */
(cov_xgsxswaur().s[4]++, require("../../lib/actions/setting.actions"));
const _fs =
/* istanbul ignore next */
(/*#__PURE__*/cov_xgsxswaur().s[5]++, _interop_require_default(require("fs")));
const _path =
/* istanbul ignore next */
(/*#__PURE__*/cov_xgsxswaur().s[6]++, _interop_require_default(require("path")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_xgsxswaur().f[1]++;
  cov_xgsxswaur().s[7]++;
  return /* istanbul ignore next */(cov_xgsxswaur().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_xgsxswaur().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_xgsxswaur().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_xgsxswaur().b[0][1]++, {
    default: obj
  });
}
async function GET() {
  /* istanbul ignore next */
  cov_xgsxswaur().f[2]++;
  cov_xgsxswaur().s[8]++;
  try {
    const {
      site: {
        url
      }
    } =
    /* istanbul ignore next */
    (cov_xgsxswaur().s[9]++, await (0, _settingactions.getSetting)());
    // Only allow the official domain, fallback to the correct one
    const baseUrl =
    /* istanbul ignore next */
    (cov_xgsxswaur().s[10]++,
    /* istanbul ignore next */
    (cov_xgsxswaur().b[3][0]++, url) &&
    /* istanbul ignore next */
    (cov_xgsxswaur().b[3][1]++, url.startsWith('https://hager-zon.vercel.app')) ?
    /* istanbul ignore next */
    (cov_xgsxswaur().b[2][0]++, url.replace(/\/+$/, '')) :
    /* istanbul ignore next */
    (cov_xgsxswaur().b[2][1]++, 'https://hager-zon.vercel.app'));
    const nowIso =
    /* istanbul ignore next */
    (cov_xgsxswaur().s[11]++, new Date().toISOString());
    const imagesDir =
    /* istanbul ignore next */
    (cov_xgsxswaur().s[12]++, _path.default.join(process.cwd(), 'public', 'images'));
    const mediaDir =
    /* istanbul ignore next */
    (cov_xgsxswaur().s[13]++, _path.default.join(process.cwd(), 'public', 'media'));
    function getImagesFromDir(dir, urlPrefix) {
      /* istanbul ignore next */
      cov_xgsxswaur().f[3]++;
      cov_xgsxswaur().s[14]++;
      if (!_fs.default.existsSync(dir)) {
        /* istanbul ignore next */
        cov_xgsxswaur().b[4][0]++;
        cov_xgsxswaur().s[15]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_xgsxswaur().b[4][1]++;
      }
      cov_xgsxswaur().s[16]++;
      return _fs.default.readdirSync(dir).filter(f => {
        /* istanbul ignore next */
        cov_xgsxswaur().f[4]++;
        cov_xgsxswaur().s[17]++;
        return /\.(jpe?g|png|gif|webp|svg|bmp|ico|tiff?)$/i.test(f);
      }).map(f => {
        /* istanbul ignore next */
        cov_xgsxswaur().f[5]++;
        cov_xgsxswaur().s[18]++;
        return {
          loc: `${baseUrl}/${urlPrefix}/${f}`,
          updatedAt: nowIso
        };
      });
    }
    const images =
    /* istanbul ignore next */
    (cov_xgsxswaur().s[19]++, [...getImagesFromDir(imagesDir, 'images'), ...getImagesFromDir(mediaDir, 'media')]);
    const xml =
    /* istanbul ignore next */
    (cov_xgsxswaur().s[20]++, `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  ${images.map(img => {
      /* istanbul ignore next */
      cov_xgsxswaur().f[6]++;
      cov_xgsxswaur().s[21]++;
      return `
    <url>
      <loc>${img.loc}</loc>
      <lastmod>${img.updatedAt}</lastmod>
      <changefreq>monthly</changefreq>
      <priority>0.6</priority>
    </url>`;
    }).join('\n')}
</urlset>`);
    /* istanbul ignore next */
    cov_xgsxswaur().s[22]++;
    return new _server.NextResponse(xml, {
      headers: {
        'Content-Type': 'application/xml'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_xgsxswaur().s[23]++;
    console.error('Error generating images sitemap:', error);
    /* istanbul ignore next */
    cov_xgsxswaur().s[24]++;
    return new _server.NextResponse('Error generating sitemap', {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHRVQiLCJjb3ZfeGdzeHN3YXVyIiwiZiIsInMiLCJzaXRlIiwidXJsIiwiX3NldHRpbmdhY3Rpb25zIiwiZ2V0U2V0dGluZyIsImJhc2VVcmwiLCJiIiwic3RhcnRzV2l0aCIsInJlcGxhY2UiLCJub3dJc28iLCJEYXRlIiwidG9JU09TdHJpbmciLCJpbWFnZXNEaXIiLCJfcGF0aCIsImRlZmF1bHQiLCJqb2luIiwicHJvY2VzcyIsImN3ZCIsIm1lZGlhRGlyIiwiZ2V0SW1hZ2VzRnJvbURpciIsImRpciIsInVybFByZWZpeCIsIl9mcyIsImV4aXN0c1N5bmMiLCJyZWFkZGlyU3luYyIsImZpbHRlciIsInRlc3QiLCJtYXAiLCJsb2MiLCJ1cGRhdGVkQXQiLCJpbWFnZXMiLCJ4bWwiLCJpbWciLCJfc2VydmVyIiwiTmV4dFJlc3BvbnNlIiwiaGVhZGVycyIsImVycm9yIiwiY29uc29sZSIsInN0YXR1cyJdLCJzb3VyY2VzIjpbIi9ob21lL21hcmsvRG93bmxvYWRzL25leHRqcy1hbWF6b25hLW1haW4vYXBwL3NpdGVtYXAtaW1hZ2VzLnhtbC9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcidcbmltcG9ydCB7IGdldFNldHRpbmcgfSBmcm9tICdAL2xpYi9hY3Rpb25zL3NldHRpbmcuYWN0aW9ucydcbmltcG9ydCBmcyBmcm9tICdmcydcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBzaXRlOiB7IHVybCB9IH0gPSBhd2FpdCBnZXRTZXR0aW5nKClcbiAgICAvLyBPbmx5IGFsbG93IHRoZSBvZmZpY2lhbCBkb21haW4sIGZhbGxiYWNrIHRvIHRoZSBjb3JyZWN0IG9uZVxuICAgIGNvbnN0IGJhc2VVcmwgPSAodXJsICYmIHVybC5zdGFydHNXaXRoKCdodHRwczovL2hhZ2VyLXpvbi52ZXJjZWwuYXBwJykpXG4gICAgICA/IHVybC5yZXBsYWNlKC9cXC8rJC8sICcnKVxuICAgICAgOiAnaHR0cHM6Ly9oYWdlci16b24udmVyY2VsLmFwcCdcbiAgICBjb25zdCBub3dJc28gPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcblxuICAgIGNvbnN0IGltYWdlc0RpciA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAncHVibGljJywgJ2ltYWdlcycpXG4gICAgY29uc3QgbWVkaWFEaXIgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3B1YmxpYycsICdtZWRpYScpXG5cbiAgICBmdW5jdGlvbiBnZXRJbWFnZXNGcm9tRGlyKGRpcjogc3RyaW5nLCB1cmxQcmVmaXg6IHN0cmluZyk6IHsgbG9jOiBzdHJpbmc7IHVwZGF0ZWRBdDogc3RyaW5nIH1bXSB7XG4gICAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZGlyKSkgcmV0dXJuIFtdXG4gICAgICByZXR1cm4gZnNcbiAgICAgICAgLnJlYWRkaXJTeW5jKGRpcilcbiAgICAgICAgLmZpbHRlcigoZikgPT5cbiAgICAgICAgICAvXFwuKGpwZT9nfHBuZ3xnaWZ8d2VicHxzdmd8Ym1wfGljb3x0aWZmPykkL2kudGVzdChmKVxuICAgICAgICApXG4gICAgICAgIC5tYXAoKGYpID0+ICh7XG4gICAgICAgICAgbG9jOiBgJHtiYXNlVXJsfS8ke3VybFByZWZpeH0vJHtmfWAsXG4gICAgICAgICAgdXBkYXRlZEF0OiBub3dJc28sIFxuICAgICAgICB9KSlcbiAgICB9XG5cbiAgICBjb25zdCBpbWFnZXMgPSBbXG4gICAgICAuLi5nZXRJbWFnZXNGcm9tRGlyKGltYWdlc0RpciwgJ2ltYWdlcycpLFxuICAgICAgLi4uZ2V0SW1hZ2VzRnJvbURpcihtZWRpYURpciwgJ21lZGlhJyksXG4gICAgXVxuXG4gICAgY29uc3QgeG1sID0gYDw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PlxuPHVybHNldCB4bWxucz1cImh0dHA6Ly93d3cuc2l0ZW1hcHMub3JnL3NjaGVtYXMvc2l0ZW1hcC8wLjlcIj5cbiAgJHtpbWFnZXNcbiAgICAubWFwKFxuICAgICAgKGltZykgPT4gYFxuICAgIDx1cmw+XG4gICAgICA8bG9jPiR7aW1nLmxvY308L2xvYz5cbiAgICAgIDxsYXN0bW9kPiR7aW1nLnVwZGF0ZWRBdH08L2xhc3Rtb2Q+XG4gICAgICA8Y2hhbmdlZnJlcT5tb250aGx5PC9jaGFuZ2VmcmVxPlxuICAgICAgPHByaW9yaXR5PjAuNjwvcHJpb3JpdHk+XG4gICAgPC91cmw+YFxuICAgIClcbiAgICAuam9pbignXFxuJyl9XG48L3VybHNldD5gXG5cbiAgICByZXR1cm4gbmV3IE5leHRSZXNwb25zZSh4bWwsIHtcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICB9XG4gICAgfSlcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZW5lcmF0aW5nIGltYWdlcyBzaXRlbWFwOicsIGVycm9yKVxuICAgIHJldHVybiBuZXcgTmV4dFJlc3BvbnNlKCdFcnJvciBnZW5lcmF0aW5nIHNpdGVtYXAnLCB7IHN0YXR1czogNTAwIH0pXG4gIH1cbn0gICAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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