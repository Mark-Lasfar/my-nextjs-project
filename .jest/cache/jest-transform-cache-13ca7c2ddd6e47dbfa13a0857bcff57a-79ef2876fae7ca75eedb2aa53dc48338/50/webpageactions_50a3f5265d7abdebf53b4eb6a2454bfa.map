{"version":3,"names":["cov_aj28r5nfr","actualCoverage","s","createWebPage","f","deleteWebPage","getAllWebPages","getWebPageById","getWebPageBySlug","updateWebPage","data","webPage","_validator","WebPageInputSchema","parse","_db","connectToDatabase","_webpagemodel","default","create","_cache","revalidatePath","success","message","error","_utils","formatError","WebPageUpdateSchema","findByIdAndUpdate","_id","id","res","findByIdAndDelete","b","Error","webPages","find","JSON","stringify","webPageId","findById","slug","findOne","isPublished"],"sources":["/home/mark/Downloads/nextjs-amazona-main/lib/actions/web-page.actions.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\n\nimport { connectToDatabase } from '@/lib/db'\nimport WebPage, { IWebPage } from '@/lib/db/models/web-page.model'\nimport { formatError } from '@/lib/utils'\n\nimport { WebPageInputSchema, WebPageUpdateSchema } from '../validator'\nimport { z } from 'zod'\n\n// CREATE\nexport async function createWebPage(data: z.infer<typeof WebPageInputSchema>) {\n  try {\n    const webPage = WebPageInputSchema.parse(data)\n    await connectToDatabase()\n    await WebPage.create(webPage)\n    revalidatePath('/admin/web-pages')\n    return {\n      success: true,\n      message: 'WebPage created successfully',\n    }\n  } catch (error) {\n    return { success: false, message: formatError(error) }\n  }\n}\n\n// UPDATE\nexport async function updateWebPage(data: z.infer<typeof WebPageUpdateSchema>) {\n  try {\n    const webPage = WebPageUpdateSchema.parse(data)\n    await connectToDatabase()\n    await WebPage.findByIdAndUpdate(webPage._id, webPage)\n    revalidatePath('/admin/web-pages')\n    return {\n      success: true,\n      message: 'WebPage updated successfully',\n    }\n  } catch (error) {\n    return { success: false, message: formatError(error) }\n  }\n}\n// DELETE\nexport async function deleteWebPage(id: string) {\n  try {\n    await connectToDatabase()\n    const res = await WebPage.findByIdAndDelete(id)\n    if (!res) throw new Error('WebPage not found')\n    revalidatePath('/admin/web-pages')\n    return {\n      success: true,\n      message: 'WebPage deleted successfully',\n    }\n  } catch (error) {\n    return { success: false, message: formatError(error) }\n  }\n}\n\n// GET ALL\nexport async function getAllWebPages() {\n  await connectToDatabase()\n  const webPages = await WebPage.find()\n  return JSON.parse(JSON.stringify(webPages)) as IWebPage[]\n}\nexport async function getWebPageById(webPageId: string) {\n  await connectToDatabase()\n  const webPage = await WebPage.findById(webPageId)\n  return JSON.parse(JSON.stringify(webPage)) as IWebPage\n}\n\n// GET ONE PAGE BY SLUG\nexport async function getWebPageBySlug(slug: string) {\n  await connectToDatabase()\n  const webPage = await WebPage.findOne({ slug, isPublished: true })\n  if (!webPage) throw new Error('WebPage not found')\n  return JSON.parse(JSON.stringify(webPage)) as IWebPage\n}\n"],"mappingssB;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;;;;;;;;;;;;;;;;;;;;EA/BAC,aAAa,WAAAA,CAAA;IAAA;IAAAH,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAbC,aAAA;;EA+BAE,aAAa,WAAAA,CAAA;IAAA;IAAAL,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAbG,aAAA;;EAgBAC,cAAc,WAAAA,CAAA;IAAA;IAAAN,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAdI,cAAA;;EAKAC,cAAc,WAAAA,CAAA;IAAA;IAAAP,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAdK,cAAA;;EAOAC,gBAAgB,WAAAA,CAAA;IAAA;IAAAR,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAhBM,gBAAA;;EA3CAC,aAAa,WAAAA,CAAA;IAAA;IAAAT,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAbO,aAAA;;;;;kCA1BS;;;kCAEG;;;wEACA;;;kCACN;;;kCAE4B;;;;;;;;;;;;;;;AAIjD,eAAeN,cAAcO,IAAwC;EAAA;EAAAV,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAC1E,IAAI;IACF,MAAMS,OAAA;IAAA;IAAA,CAAAX,aAAA,GAAAE,CAAA,QAAUU,UAAA,CAAAC,kBAAkB,CAACC,KAAK,CAACJ,IAAA;IAAA;IAAAV,aAAA,GAAAE,CAAA;IACzC,MAAM,IAAAa,GAAA,CAAAC,iBAAiB;IAAA;IAAAhB,aAAA,GAAAE,CAAA;IACvB,MAAMe,aAAA,CAAAC,OAAO,CAACC,MAAM,CAACR,OAAA;IAAA;IAAAX,aAAA,GAAAE,CAAA;IACrB,IAAAkB,MAAA,CAAAC,cAAc,EAAC;IAAA;IAAArB,aAAA,GAAAE,CAAA;IACf,OAAO;MACLoB,OAAA,EAAS;MACTC,OAAA,EAAS;IACX;EACF,EAAE,OAAOC,KAAA,EAAO;IAAA;IAAAxB,aAAA,GAAAE,CAAA;IACd,OAAO;MAAEoB,OAAA,EAAS;MAAOC,OAAA,EAAS,IAAAE,MAAA,CAAAC,WAAW,EAACF,KAAA;IAAO;EACvD;AACF;AAGO,eAAef,cAAcC,IAAyC;EAAA;EAAAV,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAC3E,IAAI;IACF,MAAMS,OAAA;IAAA;IAAA,CAAAX,aAAA,GAAAE,CAAA,QAAUU,UAAA,CAAAe,mBAAmB,CAACb,KAAK,CAACJ,IAAA;IAAA;IAAAV,aAAA,GAAAE,CAAA;IAC1C,MAAM,IAAAa,GAAA,CAAAC,iBAAiB;IAAA;IAAAhB,aAAA,GAAAE,CAAA;IACvB,MAAMe,aAAA,CAAAC,OAAO,CAACU,iBAAiB,CAACjB,OAAA,CAAQkB,GAAG,EAAElB,OAAA;IAAA;IAAAX,aAAA,GAAAE,CAAA;IAC7C,IAAAkB,MAAA,CAAAC,cAAc,EAAC;IAAA;IAAArB,aAAA,GAAAE,CAAA;IACf,OAAO;MACLoB,OAAA,EAAS;MACTC,OAAA,EAAS;IACX;EACF,EAAE,OAAOC,KAAA,EAAO;IAAA;IAAAxB,aAAA,GAAAE,CAAA;IACd,OAAO;MAAEoB,OAAA,EAAS;MAAOC,OAAA,EAAS,IAAAE,MAAA,CAAAC,WAAW,EAACF,KAAA;IAAO;EACvD;AACF;AAEO,eAAenB,cAAcyB,EAAU;EAAA;EAAA9B,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAC5C,IAAI;IAAA;IAAAF,aAAA,GAAAE,CAAA;IACF,MAAM,IAAAa,GAAA,CAAAC,iBAAiB;IACvB,MAAMe,GAAA;IAAA;IAAA,CAAA/B,aAAA,GAAAE,CAAA,QAAM,MAAMe,aAAA,CAAAC,OAAO,CAACc,iBAAiB,CAACF,EAAA;IAAA;IAAA9B,aAAA,GAAAE,CAAA;IAC5C,IAAI,CAAC6B,GAAA,EAAK;MAAA;MAAA/B,aAAA,GAAAiC,CAAA;MAAAjC,aAAA,GAAAE,CAAA;MAAA,MAAM,IAAIgC,KAAA,CAAM;IAAA;IAAA;IAAA;MAAAlC,aAAA,GAAAiC,CAAA;IAAA;IAAAjC,aAAA,GAAAE,CAAA;IAC1B,IAAAkB,MAAA,CAAAC,cAAc,EAAC;IAAA;IAAArB,aAAA,GAAAE,CAAA;IACf,OAAO;MACLoB,OAAA,EAAS;MACTC,OAAA,EAAS;IACX;EACF,EAAE,OAAOC,KAAA,EAAO;IAAA;IAAAxB,aAAA,GAAAE,CAAA;IACd,OAAO;MAAEoB,OAAA,EAAS;MAAOC,OAAA,EAAS,IAAAE,MAAA,CAAAC,WAAW,EAACF,KAAA;IAAO;EACvD;AACF;AAGO,eAAelB,eAAA;EAAA;EAAAN,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EACpB,MAAM,IAAAa,GAAA,CAAAC,iBAAiB;EACvB,MAAMmB,QAAA;EAAA;EAAA,CAAAnC,aAAA,GAAAE,CAAA,QAAW,MAAMe,aAAA,CAAAC,OAAO,CAACkB,IAAI;EAAA;EAAApC,aAAA,GAAAE,CAAA;EACnC,OAAOmC,IAAA,CAAKvB,KAAK,CAACuB,IAAA,CAAKC,SAAS,CAACH,QAAA;AACnC;AACO,eAAe5B,eAAegC,SAAiB;EAAA;EAAAvC,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EACpD,MAAM,IAAAa,GAAA,CAAAC,iBAAiB;EACvB,MAAML,OAAA;EAAA;EAAA,CAAAX,aAAA,GAAAE,CAAA,QAAU,MAAMe,aAAA,CAAAC,OAAO,CAACsB,QAAQ,CAACD,SAAA;EAAA;EAAAvC,aAAA,GAAAE,CAAA;EACvC,OAAOmC,IAAA,CAAKvB,KAAK,CAACuB,IAAA,CAAKC,SAAS,CAAC3B,OAAA;AACnC;AAGO,eAAeH,iBAAiBiC,IAAY;EAAA;EAAAzC,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EACjD,MAAM,IAAAa,GAAA,CAAAC,iBAAiB;EACvB,MAAML,OAAA;EAAA;EAAA,CAAAX,aAAA,GAAAE,CAAA,QAAU,MAAMe,aAAA,CAAAC,OAAO,CAACwB,OAAO,CAAC;IAAED,IAAA;IAAME,WAAA,EAAa;EAAK;EAAA;EAAA3C,aAAA,GAAAE,CAAA;EAChE,IAAI,CAACS,OAAA,EAAS;IAAA;IAAAX,aAAA,GAAAiC,CAAA;IAAAjC,aAAA,GAAAE,CAAA;IAAA,MAAM,IAAIgC,KAAA,CAAM;EAAA;EAAA;EAAA;IAAAlC,aAAA,GAAAiC,CAAA;EAAA;EAAAjC,aAAA,GAAAE,CAAA;EAC9B,OAAOmC,IAAA,CAAKvB,KAAK,CAACuB,IAAA,CAAKC,SAAS,CAAC3B,OAAA;AACnC","ignoreList":[]}