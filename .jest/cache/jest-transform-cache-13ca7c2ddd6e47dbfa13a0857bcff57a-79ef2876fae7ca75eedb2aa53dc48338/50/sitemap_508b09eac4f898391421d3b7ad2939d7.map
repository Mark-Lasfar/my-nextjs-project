{"version":3,"names":["default","cov_1a7cew2hu7","f","s","sitemap","revalidate","STATIC_PAGES","path","priority","DEFAULT_BASE_URL","getBaseUrl","url","b","process","env","VERCEL_URL","createStaticRoutes","baseUrl","routes","locale","_routing","routing","locales","push","lastModified","Date","changeFrequency","_db","connectToDatabase","site","_settingactions","getSetting","products","_productmodel","find","isPublished","deletedAt","$exists","select","lean","productUrls","product","slug","updatedAt","staticRoutes","error","console","map","route","Math","max"],"sources":["/home/mark/Downloads/nextjs-amazona-main/app/sitemap.ts"],"sourcesContent":["import { MetadataRoute } from 'next'\nimport { getSetting } from '@/lib/actions/setting.actions'\nimport Product from '@/lib/db/models/product.model'\nimport { connectToDatabase } from '@/lib/db'\nimport { routing } from '@/i18n/routing'\n\ntype SitemapEntry = {\n  url: string\n  lastModified: Date\n  changeFrequency:\n    | 'always'\n    | 'hourly'\n    | 'daily'\n    | 'weekly'\n    | 'monthly'\n    | 'yearly'\n    | 'never'\n  priority: number\n}\n\nconst STATIC_PAGES = [\n  { path: '', priority: 1.0 },\n  { path: '/search', priority: 0.8 },\n  { path: '/cart', priority: 0.6 },\n  { path: '/categories', priority: 0.8 },\n  { path: '/blog', priority: 0.9 },\n] as const\n\nconst DEFAULT_BASE_URL = 'https://hager-zon.vercel.app'\n\nconst getBaseUrl = (url?: string): string => {\n  if (url) return url\n  if (process.env.VERCEL_URL) return `https://${process.env.VERCEL_URL}`\n  return DEFAULT_BASE_URL\n}\n\nconst createStaticRoutes = (baseUrl: string): SitemapEntry[] => {\n  const routes: SitemapEntry[] = []\n\n  // Create entries for each locale and static page\n  for (const locale of routing.locales) {\n    for (const { path, priority } of STATIC_PAGES) {\n      routes.push({\n        url: `${baseUrl}/${locale}${path}`,\n        lastModified: new Date(),\n        changeFrequency: 'daily',\n        priority,\n      })\n    }\n  }\n\n  return routes\n}\n\nexport default async function sitemap(): Promise<MetadataRoute.Sitemap> {\n  try {\n    await connectToDatabase()\n\n    const {\n      site: { url },\n    } = await getSetting()\n    const baseUrl = getBaseUrl(url)\n\n    const products = await Product.find({\n      isPublished: true,\n      deletedAt: { $exists: false },\n    })\n      .select('slug updatedAt')\n      .lean()\n\n    const productUrls: SitemapEntry[] = []\n\n    // Create product URLs for each locale\n    for (const product of products) {\n      for (const locale of routing.locales) {\n        productUrls.push({\n          url: `${baseUrl}/${locale}/product/${product.slug}`,\n          lastModified: product.updatedAt || new Date(),\n          changeFrequency: 'daily',\n          priority: 0.8,\n        })\n      }\n    }\n\n    const staticRoutes = createStaticRoutes(baseUrl)\n    return [...staticRoutes, ...productUrls]\n  } catch (error) {\n    console.error('Error generating sitemap:', error)\n    const baseUrl = DEFAULT_BASE_URL\n    return createStaticRoutes(baseUrl).map((route) => ({\n      ...route,\n      priority: Math.max(route.priority - 0.2, 0),\n    }))\n  }\n}\n\nexport const revalidate = 3600\n"],"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","ignoreList":[]}