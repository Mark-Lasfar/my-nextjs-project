{"version":3,"names":["cov_2qnsbm507j","actualCoverage","s","createUpdateReview","f","getReviewByProductId","getReviews","data","path","session","_auth","auth","b","Error","review","_validator","ReviewInputSchema","parse","user","id","_db","connectToDatabase","existReview","_reviewmodel","default","findOne","product","comment","rating","title","save","updateProductReview","_cache","revalidatePath","success","message","create","error","_utils","formatError","productId","result","aggregate","$match","_mongoose","Types","ObjectId","$group","_id","count","$sum","totalReviews","reduce","sum","avgRating","ratingMap","map","ratingDistribution","i","push","_productmodel","findByIdAndUpdate","toFixed","numReviews","limit","page","common","pageSize","_settingactions","getSetting","skipAmount","reviews","find","populate","sort","createdAt","skip","reviewsCount","countDocuments","JSON","stringify","totalPages","Math","ceil"],"sources":["/home/mark/Downloads/nextjs-amazona-main/lib/actions/review.actions.ts"],"sourcesContent":["'use server'\n\nimport mongoose from 'mongoose'\nimport { revalidatePath } from 'next/cache'\nimport { z } from 'zod'\n\nimport { auth } from '@/auth'\n\nimport { connectToDatabase } from '../db'\nimport Product from '../db/models/product.model'\nimport Review, { IReview } from '../db/models/review.model'\nimport { formatError } from '../utils'\nimport { ReviewInputSchema } from '../validator'\nimport { IReviewDetails } from '@/types'\nimport { getSetting } from './setting.actions'\n\nexport async function createUpdateReview({\n  data,\n  path,\n}: {\n  data: z.infer<typeof ReviewInputSchema>\n  path: string\n}) {\n  try {\n    const session = await auth()\n    if (!session) {\n      throw new Error('User is not authenticated')\n    }\n\n    const review = ReviewInputSchema.parse({\n      ...data,\n      user: session?.user?.id,\n    })\n\n    await connectToDatabase()\n    const existReview = await Review.findOne({\n      product: review.product,\n      user: review.user,\n    })\n\n    if (existReview) {\n      existReview.comment = review.comment\n      existReview.rating = review.rating\n      existReview.title = review.title\n      await existReview.save()\n      await updateProductReview(review.product)\n      revalidatePath(path)\n      return {\n        success: true,\n        message: 'Review updated successfully',\n        // data: JSON.parse(JSON.stringify(existReview)),\n      }\n    } else {\n      await Review.create(review)\n      await updateProductReview(review.product)\n      revalidatePath(path)\n      return {\n        success: true,\n        message: 'Review created successfully',\n        // data: JSON.parse(JSON.stringify(newReview)),\n      }\n    }\n  } catch (error) {\n    return {\n      success: false,\n      message: formatError(error),\n    }\n  }\n}\n\nconst updateProductReview = async (productId: string) => {\n  // Calculate the new average rating, number of reviews, and rating distribution\n  const result = await Review.aggregate([\n    { $match: { product: new mongoose.Types.ObjectId(productId) } },\n    {\n      $group: {\n        _id: '$rating',\n        count: { $sum: 1 },\n      },\n    },\n  ])\n  // Calculate the total number of reviews and average rating\n  const totalReviews = result.reduce((sum, { count }) => sum + count, 0)\n  const avgRating =\n    result.reduce((sum, { _id, count }) => sum + _id * count, 0) / totalReviews\n\n  // Convert aggregation result to a map for easier lookup\n  const ratingMap = result.reduce((map, { _id, count }) => {\n    map[_id] = count\n    return map\n  }, {})\n  // Ensure all ratings 1-5 are represented, with missing ones set to count: 0\n  const ratingDistribution = []\n  for (let i = 1; i <= 5; i++) {\n    ratingDistribution.push({ rating: i, count: ratingMap[i] || 0 })\n  }\n  // Update product fields with calculated values\n  await Product.findByIdAndUpdate(productId, {\n    avgRating: avgRating.toFixed(1),\n    numReviews: totalReviews,\n    ratingDistribution,\n  })\n}\n\nexport async function getReviews({\n  productId,\n  limit,\n  page,\n}: {\n  productId: string\n  limit?: number\n  page: number\n}) {\n  const {\n    common: { pageSize },\n  } = await getSetting()\n  limit = limit || pageSize\n  await connectToDatabase()\n  const skipAmount = (page - 1) * limit\n  const reviews = await Review.find({ product: productId })\n    .populate('user', 'name')\n    .sort({\n      createdAt: 'desc',\n    })\n    .skip(skipAmount)\n    .limit(limit)\n  const reviewsCount = await Review.countDocuments({ product: productId })\n  return {\n    data: JSON.parse(JSON.stringify(reviews)) as IReviewDetails[],\n    totalPages: reviewsCount === 0 ? 1 : Math.ceil(reviewsCount / limit),\n  }\n}\nexport const getReviewByProductId = async ({\n  productId,\n}: {\n  productId: string\n}) => {\n  await connectToDatabase()\n  const session = await auth()\n  if (!session) {\n    throw new Error('User is not authenticated')\n  }\n  const review = await Review.findOne({\n    product: productId,\n    user: session?.user?.id,\n  })\n  return review ? (JSON.parse(JSON.stringify(review)) as IReview) : null\n}\n"],"mappingsoIa;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;;;;;;;;;;;;;;EApHSC,kBAAkB,WAAAA,CAAA;IAAA;IAAAH,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAlBC,kBAAA;;EAoHTE,oBAAoB,WAAAA,CAAA;IAAA;IAAAL,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAApBG,oBAAA;;EA5BSC,UAAU,WAAAA,CAAA;IAAA;IAAAN,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAVI,UAAA;;;;;wEAtGD;;;kCACU;;;kCAGV;;;mCAEa;;;yEACd;;;yEACY;;;mCACJ;;;mCACM;;;mCAEP;;;;;;;;;;;;;;;AAEpB,eAAeH,mBAAmB;EACvCI,IAAI;EACJC;AAAI,CAIL;EAAA;EAAAR,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EACC,IAAI;IACF,MAAMO,OAAA;IAAA;IAAA,CAAAT,cAAA,GAAAE,CAAA,QAAU,MAAM,IAAAQ,KAAA,CAAAC,IAAI;IAAA;IAAAX,cAAA,GAAAE,CAAA;IAC1B,IAAI,CAACO,OAAA,EAAS;MAAA;MAAAT,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MACZ,MAAM,IAAIW,KAAA,CAAM;IAClB;IAAA;IAAA;MAAAb,cAAA,GAAAY,CAAA;IAAA;IAEA,MAAME,MAAA;IAAA;IAAA,CAAAd,cAAA,GAAAE,CAAA,QAASa,UAAA,CAAAC,iBAAiB,CAACC,KAAK,CAAC;MACrC,GAAGV,IAAI;MACPW,IAAA,EAAMT,OAAA,EAASS,IAAA,EAAMC;IACvB;IAAA;IAAAnB,cAAA,GAAAE,CAAA;IAEA,MAAM,IAAAkB,GAAA,CAAAC,iBAAiB;IACvB,MAAMC,WAAA;IAAA;IAAA,CAAAtB,cAAA,GAAAE,CAAA,QAAc,MAAMqB,YAAA,CAAAC,OAAM,CAACC,OAAO,CAAC;MACvCC,OAAA,EAASZ,MAAA,CAAOY,OAAO;MACvBR,IAAA,EAAMJ,MAAA,CAAOI;IACf;IAAA;IAAAlB,cAAA,GAAAE,CAAA;IAEA,IAAIoB,WAAA,EAAa;MAAA;MAAAtB,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MACfoB,WAAA,CAAYK,OAAO,GAAGb,MAAA,CAAOa,OAAO;MAAA;MAAA3B,cAAA,GAAAE,CAAA;MACpCoB,WAAA,CAAYM,MAAM,GAAGd,MAAA,CAAOc,MAAM;MAAA;MAAA5B,cAAA,GAAAE,CAAA;MAClCoB,WAAA,CAAYO,KAAK,GAAGf,MAAA,CAAOe,KAAK;MAAA;MAAA7B,cAAA,GAAAE,CAAA;MAChC,MAAMoB,WAAA,CAAYQ,IAAI;MAAA;MAAA9B,cAAA,GAAAE,CAAA;MACtB,MAAM6B,mBAAA,CAAoBjB,MAAA,CAAOY,OAAO;MAAA;MAAA1B,cAAA,GAAAE,CAAA;MACxC,IAAA8B,MAAA,CAAAC,cAAc,EAACzB,IAAA;MAAA;MAAAR,cAAA,GAAAE,CAAA;MACf,OAAO;QACLgC,OAAA,EAAS;QACTC,OAAA,EAAS;MAEX;IACF,OAAO;MAAA;MAAAnC,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MACL,MAAMqB,YAAA,CAAAC,OAAM,CAACY,MAAM,CAACtB,MAAA;MAAA;MAAAd,cAAA,GAAAE,CAAA;MACpB,MAAM6B,mBAAA,CAAoBjB,MAAA,CAAOY,OAAO;MAAA;MAAA1B,cAAA,GAAAE,CAAA;MACxC,IAAA8B,MAAA,CAAAC,cAAc,EAACzB,IAAA;MAAA;MAAAR,cAAA,GAAAE,CAAA;MACf,OAAO;QACLgC,OAAA,EAAS;QACTC,OAAA,EAAS;MAEX;IACF;EACF,EAAE,OAAOE,KAAA,EAAO;IAAA;IAAArC,cAAA,GAAAE,CAAA;IACd,OAAO;MACLgC,OAAA,EAAS;MACTC,OAAA,EAAS,IAAAG,MAAA,CAAAC,WAAW,EAACF,KAAA;IACvB;EACF;AACF;AAAA;AAAArC,cAAA,GAAAE,CAAA;AAEA,MAAM6B,mBAAA,GAAsB,MAAOS,SAAA;EAAA;EAAAxC,cAAA,GAAAI,CAAA;EACjC;EACA,MAAMqC,MAAA;EAAA;EAAA,CAAAzC,cAAA,GAAAE,CAAA,QAAS,MAAMqB,YAAA,CAAAC,OAAM,CAACkB,SAAS,CAAC,CACpC;IAAEC,MAAA,EAAQ;MAAEjB,OAAA,EAAS,IAAIkB,SAAA,CAAApB,OAAQ,CAACqB,KAAK,CAACC,QAAQ,CAACN,SAAA;IAAW;EAAE,GAC9D;IACEO,MAAA,EAAQ;MACNC,GAAA,EAAK;MACLC,KAAA,EAAO;QAAEC,IAAA,EAAM;MAAE;IACnB;EACF,EACD;EACD;EACA,MAAMC,YAAA;EAAA;EAAA,CAAAnD,cAAA,GAAAE,CAAA,QAAeuC,MAAA,CAAOW,MAAM,CAAC,CAACC,GAAA,EAAK;IAAEJ;EAAK,CAAE,KAAK;IAAA;IAAAjD,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IAAA,OAAAmD,GAAA,GAAMJ,KAAA;EAAA,GAAO;EACpE,MAAMK,SAAA;EAAA;EAAA,CAAAtD,cAAA,GAAAE,CAAA,QACJuC,MAAA,CAAOW,MAAM,CAAC,CAACC,GAAA,EAAK;IAAEL,GAAG;IAAEC;EAAK,CAAE,KAAK;IAAA;IAAAjD,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IAAA,OAAAmD,GAAA,GAAML,GAAA,GAAMC,KAAA;EAAA,GAAO,KAAKE,YAAA;EAEjE;EACA,MAAMI,SAAA;EAAA;EAAA,CAAAvD,cAAA,GAAAE,CAAA,QAAYuC,MAAA,CAAOW,MAAM,CAAC,CAACI,GAAA,EAAK;IAAER,GAAG;IAAEC;EAAK,CAAE;IAAA;IAAAjD,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IAClDsD,GAAG,CAACR,GAAA,CAAI,GAAGC,KAAA;IAAA;IAAAjD,cAAA,GAAAE,CAAA;IACX,OAAOsD,GAAA;EACT,GAAG,CAAC;EACJ;EACA,MAAMC,kBAAA;EAAA;EAAA,CAAAzD,cAAA,GAAAE,CAAA,QAAqB,EAAE;EAAA;EAAAF,cAAA,GAAAE,CAAA;EAC7B,KAAK,IAAIwD,CAAA;EAAA;EAAA,CAAA1D,cAAA,GAAAE,CAAA,QAAI,IAAGwD,CAAA,IAAK,GAAGA,CAAA,IAAK;IAAA;IAAA1D,cAAA,GAAAE,CAAA;IAC3BuD,kBAAA,CAAmBE,IAAI,CAAC;MAAE/B,MAAA,EAAQ8B,CAAA;MAAGT,KAAA;MAAO;MAAA,CAAAjD,cAAA,GAAAY,CAAA,UAAA2C,SAAS,CAACG,CAAA,CAAE;MAAA;MAAA,CAAA1D,cAAA,GAAAY,CAAA,UAAI;IAAE;EAChE;EACA;EAAA;EAAAZ,cAAA,GAAAE,CAAA;EACA,MAAM0D,aAAA,CAAApC,OAAO,CAACqC,iBAAiB,CAACrB,SAAA,EAAW;IACzCc,SAAA,EAAWA,SAAA,CAAUQ,OAAO,CAAC;IAC7BC,UAAA,EAAYZ,YAAA;IACZM;EACF;AACF;AAEO,eAAenD,WAAW;EAC/BkC,SAAS;EACTwB,KAAK;EACLC;AAAI,CAKL;EAAA;EAAAjE,cAAA,GAAAI,CAAA;EACC,MAAM;IACJ8D,MAAA,EAAQ;MAAEC;IAAQ;EAAE,CACrB;EAAA;EAAA,CAAAnE,cAAA,GAAAE,CAAA,QAAG,MAAM,IAAAkE,eAAA,CAAAC,UAAU;EAAA;EAAArE,cAAA,GAAAE,CAAA;EACpB8D,KAAA;EAAQ;EAAA,CAAAhE,cAAA,GAAAY,CAAA,UAAAoD,KAAA;EAAA;EAAA,CAAAhE,cAAA,GAAAY,CAAA,UAASuD,QAAA;EAAA;EAAAnE,cAAA,GAAAE,CAAA;EACjB,MAAM,IAAAkB,GAAA,CAAAC,iBAAiB;EACvB,MAAMiD,UAAA;EAAA;EAAA,CAAAtE,cAAA,GAAAE,CAAA,QAAa,CAAC+D,IAAA,GAAO,KAAKD,KAAA;EAChC,MAAMO,OAAA;EAAA;EAAA,CAAAvE,cAAA,GAAAE,CAAA,QAAU,MAAMqB,YAAA,CAAAC,OAAM,CAACgD,IAAI,CAAC;IAAE9C,OAAA,EAASc;EAAU,GACpDiC,QAAQ,CAAC,QAAQ,QACjBC,IAAI,CAAC;IACJC,SAAA,EAAW;EACb,GACCC,IAAI,CAACN,UAAA,EACLN,KAAK,CAACA,KAAA;EACT,MAAMa,YAAA;EAAA;EAAA,CAAA7E,cAAA,GAAAE,CAAA,QAAe,MAAMqB,YAAA,CAAAC,OAAM,CAACsD,cAAc,CAAC;IAAEpD,OAAA,EAASc;EAAU;EAAA;EAAAxC,cAAA,GAAAE,CAAA;EACtE,OAAO;IACLK,IAAA,EAAMwE,IAAA,CAAK9D,KAAK,CAAC8D,IAAA,CAAKC,SAAS,CAACT,OAAA;IAChCU,UAAA,EAAYJ,YAAA,KAAiB;IAAA;IAAA,CAAA7E,cAAA,GAAAY,CAAA,UAAI;IAAA;IAAA,CAAAZ,cAAA,GAAAY,CAAA,UAAIsE,IAAA,CAAKC,IAAI,CAACN,YAAA,GAAeb,KAAA;EAChE;AACF;AAAA;AAAAhE,cAAA,GAAAE,CAAA;AACO,MAAMG,oBAAA,GAAuB,MAAAA,CAAO;EACzCmC;AAAS,CAGV;EAAA;EAAAxC,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EACC,MAAM,IAAAkB,GAAA,CAAAC,iBAAiB;EACvB,MAAMZ,OAAA;EAAA;EAAA,CAAAT,cAAA,GAAAE,CAAA,QAAU,MAAM,IAAAQ,KAAA,CAAAC,IAAI;EAAA;EAAAX,cAAA,GAAAE,CAAA;EAC1B,IAAI,CAACO,OAAA,EAAS;IAAA;IAAAT,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IACZ,MAAM,IAAIW,KAAA,CAAM;EAClB;EAAA;EAAA;IAAAb,cAAA,GAAAY,CAAA;EAAA;EACA,MAAME,MAAA;EAAA;EAAA,CAAAd,cAAA,GAAAE,CAAA,QAAS,MAAMqB,YAAA,CAAAC,OAAM,CAACC,OAAO,CAAC;IAClCC,OAAA,EAASc,SAAA;IACTtB,IAAA,EAAMT,OAAA,EAASS,IAAA,EAAMC;EACvB;EAAA;EAAAnB,cAAA,GAAAE,CAAA;EACA,OAAOY,MAAA;EAAA;EAAA,CAAAd,cAAA,GAAAY,CAAA,UAAUmE,IAAA,CAAK9D,KAAK,CAAC8D,IAAA,CAAKC,SAAS,CAAClE,MAAA;EAAA;EAAA,CAAAd,cAAA,GAAAY,CAAA,UAAuB;AACpE","ignoreList":[]}