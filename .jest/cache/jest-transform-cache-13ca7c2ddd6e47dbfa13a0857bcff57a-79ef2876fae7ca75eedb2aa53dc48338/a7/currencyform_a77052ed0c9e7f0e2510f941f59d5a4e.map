{"version":3,"sources":["/home/mark/Downloads/nextjs-amazona-main/app/[locale]/admin/settings/currency-form.tsx"],"sourcesContent":["'use client'\n\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport {\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { ISettingInput } from '@/types'\nimport { CurrencyField, UseFieldArrayProps } from '@/types/form'\nimport { TrashIcon } from 'lucide-react'\nimport React, { useCallback, useEffect, useMemo } from 'react'\nimport { useFieldArray, UseFormReturn } from 'react-hook-form'\n\ninterface CurrencyFormProps {\n  form: UseFormReturn<ISettingInput>\n  id: string\n}\n\nexport default function CurrencyForm({ form, id }: CurrencyFormProps) {\n  // Initialize field array for currencies with proper typing\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: 'availableCurrencies',\n  } as UseFieldArrayProps<ISettingInput>)\n\n  const {\n    setValue,\n    watch,\n    control,\n    formState: { errors },\n  } = form\n\n  const availableCurrencies = watch('availableCurrencies')\n  const defaultCurrency = watch('defaultCurrency')\n\n  // Memoize valid currencies\n  const validCurrencies = useMemo(() => {\n    return (\n      availableCurrencies?.filter((currency): currency is CurrencyField =>\n        Boolean(currency?.code)\n      ) || []\n    )\n  }, [availableCurrencies])\n\n  // Handle default currency validation\n  useEffect(() => {\n    const validCodes = validCurrencies.map((currency) => currency.code)\n    if (defaultCurrency && !validCodes.includes(defaultCurrency)) {\n      setValue('defaultCurrency', '')\n    }\n  }, [validCurrencies, defaultCurrency, setValue])\n\n  // Memoize add currency handler\n  const handleAddCurrency = useCallback(() => {\n    const newCurrency: CurrencyField = {\n      name: '',\n      code: '',\n      symbol: '',\n      convertRate: 1,\n    }\n    append(newCurrency)\n  }, [append])\n\n  return (\n    <Card id={id} className=\"shadow-md\">\n      <CardHeader className=\"space-y-1\">\n        <CardTitle className=\"text-2xl font-bold\">Currency Settings</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"space-y-4\">\n          {fields.map((field, index) => (\n            <div\n              key={field.id}\n              className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 p-4 border rounded-lg bg-background\"\n            >\n              {/* Name Field */}\n              <FormField\n                control={control}\n                name={`availableCurrencies.${index}.name`}\n                render={({ field }) => (\n                  <FormItem>\n                    {index === 0 && (\n                      <FormLabel className=\"text-sm font-medium\">\n                        Currency Name\n                      </FormLabel>\n                    )}\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"US Dollar\"\n                        className=\"w-full\"\n                      />\n                    </FormControl>\n                    <FormMessage>\n                      {errors.availableCurrencies?.[index]?.name?.message}\n                    </FormMessage>\n                  </FormItem>\n                )}\n              />\n\n              {/* Code Field */}\n              <FormField\n                control={control}\n                name={`availableCurrencies.${index}.code`}\n                render={({ field }) => (\n                  <FormItem>\n                    {index === 0 && (\n                      <FormLabel className=\"text-sm font-medium\">\n                        Currency Code\n                      </FormLabel>\n                    )}\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"USD\"\n                        className=\"w-full uppercase\"\n                        maxLength={3}\n                      />\n                    </FormControl>\n                    <FormMessage>\n                      {errors.availableCurrencies?.[index]?.code?.message}\n                    </FormMessage>\n                  </FormItem>\n                )}\n              />\n\n              {/* Symbol Field */}\n              <FormField\n                control={control}\n                name={`availableCurrencies.${index}.symbol`}\n                render={({ field }) => (\n                  <FormItem>\n                    {index === 0 && (\n                      <FormLabel className=\"text-sm font-medium\">\n                        Currency Symbol\n                      </FormLabel>\n                    )}\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"$\"\n                        className=\"w-full\"\n                        maxLength={3}\n                      />\n                    </FormControl>\n                    <FormMessage>\n                      {errors.availableCurrencies?.[index]?.symbol?.message}\n                    </FormMessage>\n                  </FormItem>\n                )}\n              />\n\n              {/* Convert Rate Field */}\n              <FormField\n                control={control}\n                name={`availableCurrencies.${index}.convertRate`}\n                render={({ field }) => (\n                  <FormItem>\n                    {index === 0 && (\n                      <FormLabel className=\"text-sm font-medium\">\n                        Conversion Rate\n                      </FormLabel>\n                    )}\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"number\"\n                        step=\"0.0001\"\n                        min=\"0\"\n                        placeholder=\"1.0000\"\n                        className=\"w-full\"\n                        onChange={(e) => {\n                          const value = parseFloat(e.target.value)\n                          field.onChange(isNaN(value) ? 0 : value)\n                        }}\n                      />\n                    </FormControl>\n                    <FormMessage>\n                      {\n                        errors.availableCurrencies?.[index]?.convertRate\n                          ?.message\n                      }\n                    </FormMessage>\n                  </FormItem>\n                )}\n              />\n\n              {/* Actions */}\n              <div className=\"flex items-end justify-end lg:justify-center\">\n                {index === 0 && (\n                  <div className=\"hidden lg:block h-6 mb-2\">Actions</div>\n                )}\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"icon\"\n                  className={`${\n                    fields.length === 1\n                      ? 'opacity-50 cursor-not-allowed'\n                      : 'hover:bg-destructive hover:text-destructive-foreground'\n                  }`}\n                  onClick={() => remove(index)}\n                  disabled={fields.length === 1}\n                  title={\n                    fields.length === 1\n                      ? 'Cannot remove last currency'\n                      : 'Remove currency'\n                  }\n                >\n                  <TrashIcon className=\"h-4 w-4\" />\n                  <span className=\"sr-only\">Remove currency</span>\n                </Button>\n              </div>\n            </div>\n          ))}\n\n          {/* Add Currency Button */}\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={handleAddCurrency}\n            className=\"w-full\"\n          >\n            Add New Currency\n          </Button>\n        </div>\n\n        {/* Default Currency Selection */}\n        <FormField\n          control={control}\n          name=\"defaultCurrency\"\n          render={({ field }) => (\n            <FormItem className=\"space-y-2\">\n              <FormLabel className=\"text-sm font-medium\">\n                Default Currency\n              </FormLabel>\n              <Select value={field.value || ''} onValueChange={field.onChange}>\n                <FormControl>\n                  <SelectTrigger className=\"w-full\">\n                    <SelectValue placeholder=\"Select default currency\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {validCurrencies.map((currency, index) => (\n                    <SelectItem key={index} value={currency.code}>\n                      {currency.name} ({currency.code})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage>{errors.defaultCurrency?.message}</FormMessage>\n            </FormItem>\n          )}\n        />\n      </CardContent>\n    </Card>\n  )\n}\n\n// Current Date and Time (UTC): 2025-04-20 19:05:48\n// Current User's Login: ibrahim-lasfar\n"],"names":["CurrencyForm","form","id","fields","append","remove","useFieldArray","control","name","setValue","watch","formState","errors","availableCurrencies","defaultCurrency","validCurrencies","useMemo","filter","currency","Boolean","code","useEffect","validCodes","map","includes","handleAddCurrency","useCallback","newCurrency","symbol","convertRate","Card","className","CardHeader","CardTitle","CardContent","div","field","index","FormField","render","FormItem","FormLabel","FormControl","Input","placeholder","FormMessage","message","maxLength","type","step","min","onChange","e","value","parseFloat","target","isNaN","Button","variant","size","length","onClick","disabled","title","TrashIcon","span","Select","onValueChange","SelectTrigger","SelectValue","SelectContent","SelectItem"],"mappings":"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"}